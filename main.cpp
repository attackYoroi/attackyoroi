#include <stdint.h>
#include <iostream>
#include <string>
#include <fstream>
#include <random>
#include <chrono>



using namespace std;

uint8_t P[720][8] = {
2, 3, 4, 0, 5, 6, 7, 1,
2, 3, 4, 0, 5, 7, 6, 1,
2, 3, 4, 0, 6, 5, 7, 1,
2, 3, 4, 0, 6, 7, 5, 1,
2, 3, 4, 0, 7, 5, 6, 1,
2, 3, 4, 0, 7, 6, 5, 1,
2, 3, 5, 0, 4, 6, 7, 1,
2, 3, 5, 0, 4, 7, 6, 1,
2, 3, 5, 0, 6, 4, 7, 1,
2, 3, 5, 0, 6, 7, 4, 1,
2, 3, 5, 0, 7, 4, 6, 1,
2, 3, 5, 0, 7, 6, 4, 1,
2, 3, 6, 0, 4, 5, 7, 1,
2, 3, 6, 0, 4, 7, 5, 1,
2, 3, 6, 0, 5, 4, 7, 1,
2, 3, 6, 0, 5, 7, 4, 1,
2, 3, 6, 0, 7, 4, 5, 1,
2, 3, 6, 0, 7, 5, 4, 1,
2, 3, 7, 0, 4, 5, 6, 1,
2, 3, 7, 0, 4, 6, 5, 1,
2, 3, 7, 0, 5, 4, 6, 1,
2, 3, 7, 0, 5, 6, 4, 1,
2, 3, 7, 0, 6, 4, 5, 1,
2, 3, 7, 0, 6, 5, 4, 1,
2, 4, 3, 0, 5, 6, 7, 1,
2, 4, 3, 0, 5, 7, 6, 1,
2, 4, 3, 0, 6, 5, 7, 1,
2, 4, 3, 0, 6, 7, 5, 1,
2, 4, 3, 0, 7, 5, 6, 1,
2, 4, 3, 0, 7, 6, 5, 1,
2, 4, 5, 0, 3, 6, 7, 1,
2, 4, 5, 0, 3, 7, 6, 1,
2, 4, 5, 0, 6, 3, 7, 1,
2, 4, 5, 0, 6, 7, 3, 1,
2, 4, 5, 0, 7, 3, 6, 1,
2, 4, 5, 0, 7, 6, 3, 1,
2, 4, 6, 0, 3, 5, 7, 1,
2, 4, 6, 0, 3, 7, 5, 1,
2, 4, 6, 0, 5, 3, 7, 1,
2, 4, 6, 0, 5, 7, 3, 1,
2, 4, 6, 0, 7, 3, 5, 1,
2, 4, 6, 0, 7, 5, 3, 1,
2, 4, 7, 0, 3, 5, 6, 1,
2, 4, 7, 0, 3, 6, 5, 1,
2, 4, 7, 0, 5, 3, 6, 1,
2, 4, 7, 0, 5, 6, 3, 1,
2, 4, 7, 0, 6, 3, 5, 1,
2, 4, 7, 0, 6, 5, 3, 1,
2, 5, 3, 0, 4, 6, 7, 1,
2, 5, 3, 0, 4, 7, 6, 1,
2, 5, 3, 0, 6, 4, 7, 1,
2, 5, 3, 0, 6, 7, 4, 1,
2, 5, 3, 0, 7, 4, 6, 1,
2, 5, 3, 0, 7, 6, 4, 1,
2, 5, 4, 0, 3, 6, 7, 1,
2, 5, 4, 0, 3, 7, 6, 1,
2, 5, 4, 0, 6, 3, 7, 1,
2, 5, 4, 0, 6, 7, 3, 1,
2, 5, 4, 0, 7, 3, 6, 1,
2, 5, 4, 0, 7, 6, 3, 1,
2, 5, 6, 0, 3, 4, 7, 1,
2, 5, 6, 0, 3, 7, 4, 1,
2, 5, 6, 0, 4, 3, 7, 1,
2, 5, 6, 0, 4, 7, 3, 1,
2, 5, 6, 0, 7, 3, 4, 1,
2, 5, 6, 0, 7, 4, 3, 1,
2, 5, 7, 0, 3, 4, 6, 1,
2, 5, 7, 0, 3, 6, 4, 1,
2, 5, 7, 0, 4, 3, 6, 1,
2, 5, 7, 0, 4, 6, 3, 1,
2, 5, 7, 0, 6, 3, 4, 1,
2, 5, 7, 0, 6, 4, 3, 1,
2, 6, 3, 0, 4, 5, 7, 1,
2, 6, 3, 0, 4, 7, 5, 1,
2, 6, 3, 0, 5, 4, 7, 1,
2, 6, 3, 0, 5, 7, 4, 1,
2, 6, 3, 0, 7, 4, 5, 1,
2, 6, 3, 0, 7, 5, 4, 1,
2, 6, 4, 0, 3, 5, 7, 1,
2, 6, 4, 0, 3, 7, 5, 1,
2, 6, 4, 0, 5, 3, 7, 1,
2, 6, 4, 0, 5, 7, 3, 1,
2, 6, 4, 0, 7, 3, 5, 1,
2, 6, 4, 0, 7, 5, 3, 1,
2, 6, 5, 0, 3, 4, 7, 1,
2, 6, 5, 0, 3, 7, 4, 1,
2, 6, 5, 0, 4, 3, 7, 1,
2, 6, 5, 0, 4, 7, 3, 1,
2, 6, 5, 0, 7, 3, 4, 1,
2, 6, 5, 0, 7, 4, 3, 1,
2, 6, 7, 0, 3, 4, 5, 1,
2, 6, 7, 0, 3, 5, 4, 1,
2, 6, 7, 0, 4, 3, 5, 1,
2, 6, 7, 0, 4, 5, 3, 1,
2, 6, 7, 0, 5, 3, 4, 1,
2, 6, 7, 0, 5, 4, 3, 1,
2, 7, 3, 0, 4, 5, 6, 1,
2, 7, 3, 0, 4, 6, 5, 1,
2, 7, 3, 0, 5, 4, 6, 1,
2, 7, 3, 0, 5, 6, 4, 1,
2, 7, 3, 0, 6, 4, 5, 1,
2, 7, 3, 0, 6, 5, 4, 1,
2, 7, 4, 0, 3, 5, 6, 1,
2, 7, 4, 0, 3, 6, 5, 1,
2, 7, 4, 0, 5, 3, 6, 1,
2, 7, 4, 0, 5, 6, 3, 1,
2, 7, 4, 0, 6, 3, 5, 1,
2, 7, 4, 0, 6, 5, 3, 1,
2, 7, 5, 0, 3, 4, 6, 1,
2, 7, 5, 0, 3, 6, 4, 1,
2, 7, 5, 0, 4, 3, 6, 1,
2, 7, 5, 0, 4, 6, 3, 1,
2, 7, 5, 0, 6, 3, 4, 1,
2, 7, 5, 0, 6, 4, 3, 1,
2, 7, 6, 0, 3, 4, 5, 1,
2, 7, 6, 0, 3, 5, 4, 1,
2, 7, 6, 0, 4, 3, 5, 1,
2, 7, 6, 0, 4, 5, 3, 1,
2, 7, 6, 0, 5, 3, 4, 1,
2, 7, 6, 0, 5, 4, 3, 1,
3, 2, 4, 0, 5, 6, 7, 1,
3, 2, 4, 0, 5, 7, 6, 1,
3, 2, 4, 0, 6, 5, 7, 1,
3, 2, 4, 0, 6, 7, 5, 1,
3, 2, 4, 0, 7, 5, 6, 1,
3, 2, 4, 0, 7, 6, 5, 1,
3, 2, 5, 0, 4, 6, 7, 1,
3, 2, 5, 0, 4, 7, 6, 1,
3, 2, 5, 0, 6, 4, 7, 1,
3, 2, 5, 0, 6, 7, 4, 1,
3, 2, 5, 0, 7, 4, 6, 1,
3, 2, 5, 0, 7, 6, 4, 1,
3, 2, 6, 0, 4, 5, 7, 1,
3, 2, 6, 0, 4, 7, 5, 1,
3, 2, 6, 0, 5, 4, 7, 1,
3, 2, 6, 0, 5, 7, 4, 1,
3, 2, 6, 0, 7, 4, 5, 1,
3, 2, 6, 0, 7, 5, 4, 1,
3, 2, 7, 0, 4, 5, 6, 1,
3, 2, 7, 0, 4, 6, 5, 1,
3, 2, 7, 0, 5, 4, 6, 1,
3, 2, 7, 0, 5, 6, 4, 1,
3, 2, 7, 0, 6, 4, 5, 1,
3, 2, 7, 0, 6, 5, 4, 1,
3, 4, 2, 0, 5, 6, 7, 1,
3, 4, 2, 0, 5, 7, 6, 1,
3, 4, 2, 0, 6, 5, 7, 1,
3, 4, 2, 0, 6, 7, 5, 1,
3, 4, 2, 0, 7, 5, 6, 1,
3, 4, 2, 0, 7, 6, 5, 1,
3, 4, 5, 0, 2, 6, 7, 1,
3, 4, 5, 0, 2, 7, 6, 1,
3, 4, 5, 0, 6, 2, 7, 1,
3, 4, 5, 0, 6, 7, 2, 1,
3, 4, 5, 0, 7, 2, 6, 1,
3, 4, 5, 0, 7, 6, 2, 1,
3, 4, 6, 0, 2, 5, 7, 1,
3, 4, 6, 0, 2, 7, 5, 1,
3, 4, 6, 0, 5, 2, 7, 1,
3, 4, 6, 0, 5, 7, 2, 1,
3, 4, 6, 0, 7, 2, 5, 1,
3, 4, 6, 0, 7, 5, 2, 1,
3, 4, 7, 0, 2, 5, 6, 1,
3, 4, 7, 0, 2, 6, 5, 1,
3, 4, 7, 0, 5, 2, 6, 1,
3, 4, 7, 0, 5, 6, 2, 1,
3, 4, 7, 0, 6, 2, 5, 1,
3, 4, 7, 0, 6, 5, 2, 1,
3, 5, 2, 0, 4, 6, 7, 1,
3, 5, 2, 0, 4, 7, 6, 1,
3, 5, 2, 0, 6, 4, 7, 1,
3, 5, 2, 0, 6, 7, 4, 1,
3, 5, 2, 0, 7, 4, 6, 1,
3, 5, 2, 0, 7, 6, 4, 1,
3, 5, 4, 0, 2, 6, 7, 1,
3, 5, 4, 0, 2, 7, 6, 1,
3, 5, 4, 0, 6, 2, 7, 1,
3, 5, 4, 0, 6, 7, 2, 1,
3, 5, 4, 0, 7, 2, 6, 1,
3, 5, 4, 0, 7, 6, 2, 1,
3, 5, 6, 0, 2, 4, 7, 1,
3, 5, 6, 0, 2, 7, 4, 1,
3, 5, 6, 0, 4, 2, 7, 1,
3, 5, 6, 0, 4, 7, 2, 1,
3, 5, 6, 0, 7, 2, 4, 1,
3, 5, 6, 0, 7, 4, 2, 1,
3, 5, 7, 0, 2, 4, 6, 1,
3, 5, 7, 0, 2, 6, 4, 1,
3, 5, 7, 0, 4, 2, 6, 1,
3, 5, 7, 0, 4, 6, 2, 1,
3, 5, 7, 0, 6, 2, 4, 1,
3, 5, 7, 0, 6, 4, 2, 1,
3, 6, 2, 0, 4, 5, 7, 1,
3, 6, 2, 0, 4, 7, 5, 1,
3, 6, 2, 0, 5, 4, 7, 1,
3, 6, 2, 0, 5, 7, 4, 1,
3, 6, 2, 0, 7, 4, 5, 1,
3, 6, 2, 0, 7, 5, 4, 1,
3, 6, 4, 0, 2, 5, 7, 1,
3, 6, 4, 0, 2, 7, 5, 1,
3, 6, 4, 0, 5, 2, 7, 1,
3, 6, 4, 0, 5, 7, 2, 1,
3, 6, 4, 0, 7, 2, 5, 1,
3, 6, 4, 0, 7, 5, 2, 1,
3, 6, 5, 0, 2, 4, 7, 1,
3, 6, 5, 0, 2, 7, 4, 1,
3, 6, 5, 0, 4, 2, 7, 1,
3, 6, 5, 0, 4, 7, 2, 1,
3, 6, 5, 0, 7, 2, 4, 1,
3, 6, 5, 0, 7, 4, 2, 1,
3, 6, 7, 0, 2, 4, 5, 1,
3, 6, 7, 0, 2, 5, 4, 1,
3, 6, 7, 0, 4, 2, 5, 1,
3, 6, 7, 0, 4, 5, 2, 1,
3, 6, 7, 0, 5, 2, 4, 1,
3, 6, 7, 0, 5, 4, 2, 1,
3, 7, 2, 0, 4, 5, 6, 1,
3, 7, 2, 0, 4, 6, 5, 1,
3, 7, 2, 0, 5, 4, 6, 1,
3, 7, 2, 0, 5, 6, 4, 1,
3, 7, 2, 0, 6, 4, 5, 1,
3, 7, 2, 0, 6, 5, 4, 1,
3, 7, 4, 0, 2, 5, 6, 1,
3, 7, 4, 0, 2, 6, 5, 1,
3, 7, 4, 0, 5, 2, 6, 1,
3, 7, 4, 0, 5, 6, 2, 1,
3, 7, 4, 0, 6, 2, 5, 1,
3, 7, 4, 0, 6, 5, 2, 1,
3, 7, 5, 0, 2, 4, 6, 1,
3, 7, 5, 0, 2, 6, 4, 1,
3, 7, 5, 0, 4, 2, 6, 1,
3, 7, 5, 0, 4, 6, 2, 1,
3, 7, 5, 0, 6, 2, 4, 1,
3, 7, 5, 0, 6, 4, 2, 1,
3, 7, 6, 0, 2, 4, 5, 1,
3, 7, 6, 0, 2, 5, 4, 1,
3, 7, 6, 0, 4, 2, 5, 1,
3, 7, 6, 0, 4, 5, 2, 1,
3, 7, 6, 0, 5, 2, 4, 1,
3, 7, 6, 0, 5, 4, 2, 1,
4, 2, 3, 0, 5, 6, 7, 1,
4, 2, 3, 0, 5, 7, 6, 1,
4, 2, 3, 0, 6, 5, 7, 1,
4, 2, 3, 0, 6, 7, 5, 1,
4, 2, 3, 0, 7, 5, 6, 1,
4, 2, 3, 0, 7, 6, 5, 1,
4, 2, 5, 0, 3, 6, 7, 1,
4, 2, 5, 0, 3, 7, 6, 1,
4, 2, 5, 0, 6, 3, 7, 1,
4, 2, 5, 0, 6, 7, 3, 1,
4, 2, 5, 0, 7, 3, 6, 1,
4, 2, 5, 0, 7, 6, 3, 1,
4, 2, 6, 0, 3, 5, 7, 1,
4, 2, 6, 0, 3, 7, 5, 1,
4, 2, 6, 0, 5, 3, 7, 1,
4, 2, 6, 0, 5, 7, 3, 1,
4, 2, 6, 0, 7, 3, 5, 1,
4, 2, 6, 0, 7, 5, 3, 1,
4, 2, 7, 0, 3, 5, 6, 1,
4, 2, 7, 0, 3, 6, 5, 1,
4, 2, 7, 0, 5, 3, 6, 1,
4, 2, 7, 0, 5, 6, 3, 1,
4, 2, 7, 0, 6, 3, 5, 1,
4, 2, 7, 0, 6, 5, 3, 1,
4, 3, 2, 0, 5, 6, 7, 1,
4, 3, 2, 0, 5, 7, 6, 1,
4, 3, 2, 0, 6, 5, 7, 1,
4, 3, 2, 0, 6, 7, 5, 1,
4, 3, 2, 0, 7, 5, 6, 1,
4, 3, 2, 0, 7, 6, 5, 1,
4, 3, 5, 0, 2, 6, 7, 1,
4, 3, 5, 0, 2, 7, 6, 1,
4, 3, 5, 0, 6, 2, 7, 1,
4, 3, 5, 0, 6, 7, 2, 1,
4, 3, 5, 0, 7, 2, 6, 1,
4, 3, 5, 0, 7, 6, 2, 1,
4, 3, 6, 0, 2, 5, 7, 1,
4, 3, 6, 0, 2, 7, 5, 1,
4, 3, 6, 0, 5, 2, 7, 1,
4, 3, 6, 0, 5, 7, 2, 1,
4, 3, 6, 0, 7, 2, 5, 1,
4, 3, 6, 0, 7, 5, 2, 1,
4, 3, 7, 0, 2, 5, 6, 1,
4, 3, 7, 0, 2, 6, 5, 1,
4, 3, 7, 0, 5, 2, 6, 1,
4, 3, 7, 0, 5, 6, 2, 1,
4, 3, 7, 0, 6, 2, 5, 1,
4, 3, 7, 0, 6, 5, 2, 1,
4, 5, 2, 0, 3, 6, 7, 1,
4, 5, 2, 0, 3, 7, 6, 1,
4, 5, 2, 0, 6, 3, 7, 1,
4, 5, 2, 0, 6, 7, 3, 1,
4, 5, 2, 0, 7, 3, 6, 1,
4, 5, 2, 0, 7, 6, 3, 1,
4, 5, 3, 0, 2, 6, 7, 1,
4, 5, 3, 0, 2, 7, 6, 1,
4, 5, 3, 0, 6, 2, 7, 1,
4, 5, 3, 0, 6, 7, 2, 1,
4, 5, 3, 0, 7, 2, 6, 1,
4, 5, 3, 0, 7, 6, 2, 1,
4, 5, 6, 0, 2, 3, 7, 1,
4, 5, 6, 0, 2, 7, 3, 1,
4, 5, 6, 0, 3, 2, 7, 1,
4, 5, 6, 0, 3, 7, 2, 1,
4, 5, 6, 0, 7, 2, 3, 1,
4, 5, 6, 0, 7, 3, 2, 1,
4, 5, 7, 0, 2, 3, 6, 1,
4, 5, 7, 0, 2, 6, 3, 1,
4, 5, 7, 0, 3, 2, 6, 1,
4, 5, 7, 0, 3, 6, 2, 1,
4, 5, 7, 0, 6, 2, 3, 1,
4, 5, 7, 0, 6, 3, 2, 1,
4, 6, 2, 0, 3, 5, 7, 1,
4, 6, 2, 0, 3, 7, 5, 1,
4, 6, 2, 0, 5, 3, 7, 1,
4, 6, 2, 0, 5, 7, 3, 1,
4, 6, 2, 0, 7, 3, 5, 1,
4, 6, 2, 0, 7, 5, 3, 1,
4, 6, 3, 0, 2, 5, 7, 1,
4, 6, 3, 0, 2, 7, 5, 1,
4, 6, 3, 0, 5, 2, 7, 1,
4, 6, 3, 0, 5, 7, 2, 1,
4, 6, 3, 0, 7, 2, 5, 1,
4, 6, 3, 0, 7, 5, 2, 1,
4, 6, 5, 0, 2, 3, 7, 1,
4, 6, 5, 0, 2, 7, 3, 1,
4, 6, 5, 0, 3, 2, 7, 1,
4, 6, 5, 0, 3, 7, 2, 1,
4, 6, 5, 0, 7, 2, 3, 1,
4, 6, 5, 0, 7, 3, 2, 1,
4, 6, 7, 0, 2, 3, 5, 1,
4, 6, 7, 0, 2, 5, 3, 1,
4, 6, 7, 0, 3, 2, 5, 1,
4, 6, 7, 0, 3, 5, 2, 1,
4, 6, 7, 0, 5, 2, 3, 1,
4, 6, 7, 0, 5, 3, 2, 1,
4, 7, 2, 0, 3, 5, 6, 1,
4, 7, 2, 0, 3, 6, 5, 1,
4, 7, 2, 0, 5, 3, 6, 1,
4, 7, 2, 0, 5, 6, 3, 1,
4, 7, 2, 0, 6, 3, 5, 1,
4, 7, 2, 0, 6, 5, 3, 1,
4, 7, 3, 0, 2, 5, 6, 1,
4, 7, 3, 0, 2, 6, 5, 1,
4, 7, 3, 0, 5, 2, 6, 1,
4, 7, 3, 0, 5, 6, 2, 1,
4, 7, 3, 0, 6, 2, 5, 1,
4, 7, 3, 0, 6, 5, 2, 1,
4, 7, 5, 0, 2, 3, 6, 1,
4, 7, 5, 0, 2, 6, 3, 1,
4, 7, 5, 0, 3, 2, 6, 1,
4, 7, 5, 0, 3, 6, 2, 1,
4, 7, 5, 0, 6, 2, 3, 1,
4, 7, 5, 0, 6, 3, 2, 1,
4, 7, 6, 0, 2, 3, 5, 1,
4, 7, 6, 0, 2, 5, 3, 1,
4, 7, 6, 0, 3, 2, 5, 1,
4, 7, 6, 0, 3, 5, 2, 1,
4, 7, 6, 0, 5, 2, 3, 1,
4, 7, 6, 0, 5, 3, 2, 1,
5, 2, 3, 0, 4, 6, 7, 1,
5, 2, 3, 0, 4, 7, 6, 1,
5, 2, 3, 0, 6, 4, 7, 1,
5, 2, 3, 0, 6, 7, 4, 1,
5, 2, 3, 0, 7, 4, 6, 1,
5, 2, 3, 0, 7, 6, 4, 1,
5, 2, 4, 0, 3, 6, 7, 1,
5, 2, 4, 0, 3, 7, 6, 1,
5, 2, 4, 0, 6, 3, 7, 1,
5, 2, 4, 0, 6, 7, 3, 1,
5, 2, 4, 0, 7, 3, 6, 1,
5, 2, 4, 0, 7, 6, 3, 1,
5, 2, 6, 0, 3, 4, 7, 1,
5, 2, 6, 0, 3, 7, 4, 1,
5, 2, 6, 0, 4, 3, 7, 1,
5, 2, 6, 0, 4, 7, 3, 1,
5, 2, 6, 0, 7, 3, 4, 1,
5, 2, 6, 0, 7, 4, 3, 1,
5, 2, 7, 0, 3, 4, 6, 1,
5, 2, 7, 0, 3, 6, 4, 1,
5, 2, 7, 0, 4, 3, 6, 1,
5, 2, 7, 0, 4, 6, 3, 1,
5, 2, 7, 0, 6, 3, 4, 1,
5, 2, 7, 0, 6, 4, 3, 1,
5, 3, 2, 0, 4, 6, 7, 1,
5, 3, 2, 0, 4, 7, 6, 1,
5, 3, 2, 0, 6, 4, 7, 1,
5, 3, 2, 0, 6, 7, 4, 1,
5, 3, 2, 0, 7, 4, 6, 1,
5, 3, 2, 0, 7, 6, 4, 1,
5, 3, 4, 0, 2, 6, 7, 1,
5, 3, 4, 0, 2, 7, 6, 1,
5, 3, 4, 0, 6, 2, 7, 1,
5, 3, 4, 0, 6, 7, 2, 1,
5, 3, 4, 0, 7, 2, 6, 1,
5, 3, 4, 0, 7, 6, 2, 1,
5, 3, 6, 0, 2, 4, 7, 1,
5, 3, 6, 0, 2, 7, 4, 1,
5, 3, 6, 0, 4, 2, 7, 1,
5, 3, 6, 0, 4, 7, 2, 1,
5, 3, 6, 0, 7, 2, 4, 1,
5, 3, 6, 0, 7, 4, 2, 1,
5, 3, 7, 0, 2, 4, 6, 1,
5, 3, 7, 0, 2, 6, 4, 1,
5, 3, 7, 0, 4, 2, 6, 1,
5, 3, 7, 0, 4, 6, 2, 1,
5, 3, 7, 0, 6, 2, 4, 1,
5, 3, 7, 0, 6, 4, 2, 1,
5, 4, 2, 0, 3, 6, 7, 1,
5, 4, 2, 0, 3, 7, 6, 1,
5, 4, 2, 0, 6, 3, 7, 1,
5, 4, 2, 0, 6, 7, 3, 1,
5, 4, 2, 0, 7, 3, 6, 1,
5, 4, 2, 0, 7, 6, 3, 1,
5, 4, 3, 0, 2, 6, 7, 1,
5, 4, 3, 0, 2, 7, 6, 1,
5, 4, 3, 0, 6, 2, 7, 1,
5, 4, 3, 0, 6, 7, 2, 1,
5, 4, 3, 0, 7, 2, 6, 1,
5, 4, 3, 0, 7, 6, 2, 1,
5, 4, 6, 0, 2, 3, 7, 1,
5, 4, 6, 0, 2, 7, 3, 1,
5, 4, 6, 0, 3, 2, 7, 1,
5, 4, 6, 0, 3, 7, 2, 1,
5, 4, 6, 0, 7, 2, 3, 1,
5, 4, 6, 0, 7, 3, 2, 1,
5, 4, 7, 0, 2, 3, 6, 1,
5, 4, 7, 0, 2, 6, 3, 1,
5, 4, 7, 0, 3, 2, 6, 1,
5, 4, 7, 0, 3, 6, 2, 1,
5, 4, 7, 0, 6, 2, 3, 1,
5, 4, 7, 0, 6, 3, 2, 1,
5, 6, 2, 0, 3, 4, 7, 1,
5, 6, 2, 0, 3, 7, 4, 1,
5, 6, 2, 0, 4, 3, 7, 1,
5, 6, 2, 0, 4, 7, 3, 1,
5, 6, 2, 0, 7, 3, 4, 1,
5, 6, 2, 0, 7, 4, 3, 1,
5, 6, 3, 0, 2, 4, 7, 1,
5, 6, 3, 0, 2, 7, 4, 1,
5, 6, 3, 0, 4, 2, 7, 1,
5, 6, 3, 0, 4, 7, 2, 1,
5, 6, 3, 0, 7, 2, 4, 1,
5, 6, 3, 0, 7, 4, 2, 1,
5, 6, 4, 0, 2, 3, 7, 1,
5, 6, 4, 0, 2, 7, 3, 1,
5, 6, 4, 0, 3, 2, 7, 1,
5, 6, 4, 0, 3, 7, 2, 1,
5, 6, 4, 0, 7, 2, 3, 1,
5, 6, 4, 0, 7, 3, 2, 1,
5, 6, 7, 0, 2, 3, 4, 1,
5, 6, 7, 0, 2, 4, 3, 1,
5, 6, 7, 0, 3, 2, 4, 1,
5, 6, 7, 0, 3, 4, 2, 1,
5, 6, 7, 0, 4, 2, 3, 1,
5, 6, 7, 0, 4, 3, 2, 1,
5, 7, 2, 0, 3, 4, 6, 1,
5, 7, 2, 0, 3, 6, 4, 1,
5, 7, 2, 0, 4, 3, 6, 1,
5, 7, 2, 0, 4, 6, 3, 1,
5, 7, 2, 0, 6, 3, 4, 1,
5, 7, 2, 0, 6, 4, 3, 1,
5, 7, 3, 0, 2, 4, 6, 1,
5, 7, 3, 0, 2, 6, 4, 1,
5, 7, 3, 0, 4, 2, 6, 1,
5, 7, 3, 0, 4, 6, 2, 1,
5, 7, 3, 0, 6, 2, 4, 1,
5, 7, 3, 0, 6, 4, 2, 1,
5, 7, 4, 0, 2, 3, 6, 1,
5, 7, 4, 0, 2, 6, 3, 1,
5, 7, 4, 0, 3, 2, 6, 1,
5, 7, 4, 0, 3, 6, 2, 1,
5, 7, 4, 0, 6, 2, 3, 1,
5, 7, 4, 0, 6, 3, 2, 1,
5, 7, 6, 0, 2, 3, 4, 1,
5, 7, 6, 0, 2, 4, 3, 1,
5, 7, 6, 0, 3, 2, 4, 1,
5, 7, 6, 0, 3, 4, 2, 1,
5, 7, 6, 0, 4, 2, 3, 1,
5, 7, 6, 0, 4, 3, 2, 1,
6, 2, 3, 0, 4, 5, 7, 1,
6, 2, 3, 0, 4, 7, 5, 1,
6, 2, 3, 0, 5, 4, 7, 1,
6, 2, 3, 0, 5, 7, 4, 1,
6, 2, 3, 0, 7, 4, 5, 1,
6, 2, 3, 0, 7, 5, 4, 1,
6, 2, 4, 0, 3, 5, 7, 1,
6, 2, 4, 0, 3, 7, 5, 1,
6, 2, 4, 0, 5, 3, 7, 1,
6, 2, 4, 0, 5, 7, 3, 1,
6, 2, 4, 0, 7, 3, 5, 1,
6, 2, 4, 0, 7, 5, 3, 1,
6, 2, 5, 0, 3, 4, 7, 1,
6, 2, 5, 0, 3, 7, 4, 1,
6, 2, 5, 0, 4, 3, 7, 1,
6, 2, 5, 0, 4, 7, 3, 1,
6, 2, 5, 0, 7, 3, 4, 1,
6, 2, 5, 0, 7, 4, 3, 1,
6, 2, 7, 0, 3, 4, 5, 1,
6, 2, 7, 0, 3, 5, 4, 1,
6, 2, 7, 0, 4, 3, 5, 1,
6, 2, 7, 0, 4, 5, 3, 1,
6, 2, 7, 0, 5, 3, 4, 1,
6, 2, 7, 0, 5, 4, 3, 1,
6, 3, 2, 0, 4, 5, 7, 1,
6, 3, 2, 0, 4, 7, 5, 1,
6, 3, 2, 0, 5, 4, 7, 1,
6, 3, 2, 0, 5, 7, 4, 1,
6, 3, 2, 0, 7, 4, 5, 1,
6, 3, 2, 0, 7, 5, 4, 1,
6, 3, 4, 0, 2, 5, 7, 1,
6, 3, 4, 0, 2, 7, 5, 1,
6, 3, 4, 0, 5, 2, 7, 1,
6, 3, 4, 0, 5, 7, 2, 1,
6, 3, 4, 0, 7, 2, 5, 1,
6, 3, 4, 0, 7, 5, 2, 1,
6, 3, 5, 0, 2, 4, 7, 1,
6, 3, 5, 0, 2, 7, 4, 1,
6, 3, 5, 0, 4, 2, 7, 1,
6, 3, 5, 0, 4, 7, 2, 1,
6, 3, 5, 0, 7, 2, 4, 1,
6, 3, 5, 0, 7, 4, 2, 1,
6, 3, 7, 0, 2, 4, 5, 1,
6, 3, 7, 0, 2, 5, 4, 1,
6, 3, 7, 0, 4, 2, 5, 1,
6, 3, 7, 0, 4, 5, 2, 1,
6, 3, 7, 0, 5, 2, 4, 1,
6, 3, 7, 0, 5, 4, 2, 1,
6, 4, 2, 0, 3, 5, 7, 1,
6, 4, 2, 0, 3, 7, 5, 1,
6, 4, 2, 0, 5, 3, 7, 1,
6, 4, 2, 0, 5, 7, 3, 1,
6, 4, 2, 0, 7, 3, 5, 1,
6, 4, 2, 0, 7, 5, 3, 1,
6, 4, 3, 0, 2, 5, 7, 1,
6, 4, 3, 0, 2, 7, 5, 1,
6, 4, 3, 0, 5, 2, 7, 1,
6, 4, 3, 0, 5, 7, 2, 1,
6, 4, 3, 0, 7, 2, 5, 1,
6, 4, 3, 0, 7, 5, 2, 1,
6, 4, 5, 0, 2, 3, 7, 1,
6, 4, 5, 0, 2, 7, 3, 1,
6, 4, 5, 0, 3, 2, 7, 1,
6, 4, 5, 0, 3, 7, 2, 1,
6, 4, 5, 0, 7, 2, 3, 1,
6, 4, 5, 0, 7, 3, 2, 1,
6, 4, 7, 0, 2, 3, 5, 1,
6, 4, 7, 0, 2, 5, 3, 1,
6, 4, 7, 0, 3, 2, 5, 1,
6, 4, 7, 0, 3, 5, 2, 1,
6, 4, 7, 0, 5, 2, 3, 1,
6, 4, 7, 0, 5, 3, 2, 1,
6, 5, 2, 0, 3, 4, 7, 1,
6, 5, 2, 0, 3, 7, 4, 1,
6, 5, 2, 0, 4, 3, 7, 1,
6, 5, 2, 0, 4, 7, 3, 1,
6, 5, 2, 0, 7, 3, 4, 1,
6, 5, 2, 0, 7, 4, 3, 1,
6, 5, 3, 0, 2, 4, 7, 1,
6, 5, 3, 0, 2, 7, 4, 1,
6, 5, 3, 0, 4, 2, 7, 1,
6, 5, 3, 0, 4, 7, 2, 1,
6, 5, 3, 0, 7, 2, 4, 1,
6, 5, 3, 0, 7, 4, 2, 1,
6, 5, 4, 0, 2, 3, 7, 1,
6, 5, 4, 0, 2, 7, 3, 1,
6, 5, 4, 0, 3, 2, 7, 1,
6, 5, 4, 0, 3, 7, 2, 1,
6, 5, 4, 0, 7, 2, 3, 1,
6, 5, 4, 0, 7, 3, 2, 1,
6, 5, 7, 0, 2, 3, 4, 1,
6, 5, 7, 0, 2, 4, 3, 1,
6, 5, 7, 0, 3, 2, 4, 1,
6, 5, 7, 0, 3, 4, 2, 1,
6, 5, 7, 0, 4, 2, 3, 1,
6, 5, 7, 0, 4, 3, 2, 1,
6, 7, 2, 0, 3, 4, 5, 1,
6, 7, 2, 0, 3, 5, 4, 1,
6, 7, 2, 0, 4, 3, 5, 1,
6, 7, 2, 0, 4, 5, 3, 1,
6, 7, 2, 0, 5, 3, 4, 1,
6, 7, 2, 0, 5, 4, 3, 1,
6, 7, 3, 0, 2, 4, 5, 1,
6, 7, 3, 0, 2, 5, 4, 1,
6, 7, 3, 0, 4, 2, 5, 1,
6, 7, 3, 0, 4, 5, 2, 1,
6, 7, 3, 0, 5, 2, 4, 1,
6, 7, 3, 0, 5, 4, 2, 1,
6, 7, 4, 0, 2, 3, 5, 1,
6, 7, 4, 0, 2, 5, 3, 1,
6, 7, 4, 0, 3, 2, 5, 1,
6, 7, 4, 0, 3, 5, 2, 1,
6, 7, 4, 0, 5, 2, 3, 1,
6, 7, 4, 0, 5, 3, 2, 1,
6, 7, 5, 0, 2, 3, 4, 1,
6, 7, 5, 0, 2, 4, 3, 1,
6, 7, 5, 0, 3, 2, 4, 1,
6, 7, 5, 0, 3, 4, 2, 1,
6, 7, 5, 0, 4, 2, 3, 1,
6, 7, 5, 0, 4, 3, 2, 1,
7, 2, 3, 0, 4, 5, 6, 1,
7, 2, 3, 0, 4, 6, 5, 1,
7, 2, 3, 0, 5, 4, 6, 1,
7, 2, 3, 0, 5, 6, 4, 1,
7, 2, 3, 0, 6, 4, 5, 1,
7, 2, 3, 0, 6, 5, 4, 1,
7, 2, 4, 0, 3, 5, 6, 1,
7, 2, 4, 0, 3, 6, 5, 1,
7, 2, 4, 0, 5, 3, 6, 1,
7, 2, 4, 0, 5, 6, 3, 1,
7, 2, 4, 0, 6, 3, 5, 1,
7, 2, 4, 0, 6, 5, 3, 1,
7, 2, 5, 0, 3, 4, 6, 1,
7, 2, 5, 0, 3, 6, 4, 1,
7, 2, 5, 0, 4, 3, 6, 1,
7, 2, 5, 0, 4, 6, 3, 1,
7, 2, 5, 0, 6, 3, 4, 1,
7, 2, 5, 0, 6, 4, 3, 1,
7, 2, 6, 0, 3, 4, 5, 1,
7, 2, 6, 0, 3, 5, 4, 1,
7, 2, 6, 0, 4, 3, 5, 1,
7, 2, 6, 0, 4, 5, 3, 1,
7, 2, 6, 0, 5, 3, 4, 1,
7, 2, 6, 0, 5, 4, 3, 1,
7, 3, 2, 0, 4, 5, 6, 1,
7, 3, 2, 0, 4, 6, 5, 1,
7, 3, 2, 0, 5, 4, 6, 1,
7, 3, 2, 0, 5, 6, 4, 1,
7, 3, 2, 0, 6, 4, 5, 1,
7, 3, 2, 0, 6, 5, 4, 1,
7, 3, 4, 0, 2, 5, 6, 1,
7, 3, 4, 0, 2, 6, 5, 1,
7, 3, 4, 0, 5, 2, 6, 1,
7, 3, 4, 0, 5, 6, 2, 1,
7, 3, 4, 0, 6, 2, 5, 1,
7, 3, 4, 0, 6, 5, 2, 1,
7, 3, 5, 0, 2, 4, 6, 1,
7, 3, 5, 0, 2, 6, 4, 1,
7, 3, 5, 0, 4, 2, 6, 1,
7, 3, 5, 0, 4, 6, 2, 1,
7, 3, 5, 0, 6, 2, 4, 1,
7, 3, 5, 0, 6, 4, 2, 1,
7, 3, 6, 0, 2, 4, 5, 1,
7, 3, 6, 0, 2, 5, 4, 1,
7, 3, 6, 0, 4, 2, 5, 1,
7, 3, 6, 0, 4, 5, 2, 1,
7, 3, 6, 0, 5, 2, 4, 1,
7, 3, 6, 0, 5, 4, 2, 1,
7, 4, 2, 0, 3, 5, 6, 1,
7, 4, 2, 0, 3, 6, 5, 1,
7, 4, 2, 0, 5, 3, 6, 1,
7, 4, 2, 0, 5, 6, 3, 1,
7, 4, 2, 0, 6, 3, 5, 1,
7, 4, 2, 0, 6, 5, 3, 1,
7, 4, 3, 0, 2, 5, 6, 1,
7, 4, 3, 0, 2, 6, 5, 1,
7, 4, 3, 0, 5, 2, 6, 1,
7, 4, 3, 0, 5, 6, 2, 1,
7, 4, 3, 0, 6, 2, 5, 1,
7, 4, 3, 0, 6, 5, 2, 1,
7, 4, 5, 0, 2, 3, 6, 1,
7, 4, 5, 0, 2, 6, 3, 1,
7, 4, 5, 0, 3, 2, 6, 1,
7, 4, 5, 0, 3, 6, 2, 1,
7, 4, 5, 0, 6, 2, 3, 1,
7, 4, 5, 0, 6, 3, 2, 1,
7, 4, 6, 0, 2, 3, 5, 1,
7, 4, 6, 0, 2, 5, 3, 1,
7, 4, 6, 0, 3, 2, 5, 1,
7, 4, 6, 0, 3, 5, 2, 1,
7, 4, 6, 0, 5, 2, 3, 1,
7, 4, 6, 0, 5, 3, 2, 1,
7, 5, 2, 0, 3, 4, 6, 1,
7, 5, 2, 0, 3, 6, 4, 1,
7, 5, 2, 0, 4, 3, 6, 1,
7, 5, 2, 0, 4, 6, 3, 1,
7, 5, 2, 0, 6, 3, 4, 1,
7, 5, 2, 0, 6, 4, 3, 1,
7, 5, 3, 0, 2, 4, 6, 1,
7, 5, 3, 0, 2, 6, 4, 1,
7, 5, 3, 0, 4, 2, 6, 1,
7, 5, 3, 0, 4, 6, 2, 1,
7, 5, 3, 0, 6, 2, 4, 1,
7, 5, 3, 0, 6, 4, 2, 1,
7, 5, 4, 0, 2, 3, 6, 1,
7, 5, 4, 0, 2, 6, 3, 1,
7, 5, 4, 0, 3, 2, 6, 1,
7, 5, 4, 0, 3, 6, 2, 1,
7, 5, 4, 0, 6, 2, 3, 1,
7, 5, 4, 0, 6, 3, 2, 1,
7, 5, 6, 0, 2, 3, 4, 1,
7, 5, 6, 0, 2, 4, 3, 1,
7, 5, 6, 0, 3, 2, 4, 1,
7, 5, 6, 0, 3, 4, 2, 1,
7, 5, 6, 0, 4, 2, 3, 1,
7, 5, 6, 0, 4, 3, 2, 1,
7, 6, 2, 0, 3, 4, 5, 1,
7, 6, 2, 0, 3, 5, 4, 1,
7, 6, 2, 0, 4, 3, 5, 1,
7, 6, 2, 0, 4, 5, 3, 1,
7, 6, 2, 0, 5, 3, 4, 1,
7, 6, 2, 0, 5, 4, 3, 1,
7, 6, 3, 0, 2, 4, 5, 1,
7, 6, 3, 0, 2, 5, 4, 1,
7, 6, 3, 0, 4, 2, 5, 1,
7, 6, 3, 0, 4, 5, 2, 1,
7, 6, 3, 0, 5, 2, 4, 1,
7, 6, 3, 0, 5, 4, 2, 1,
7, 6, 4, 0, 2, 3, 5, 1,
7, 6, 4, 0, 2, 5, 3, 1,
7, 6, 4, 0, 3, 2, 5, 1,
7, 6, 4, 0, 3, 5, 2, 1,
7, 6, 4, 0, 5, 2, 3, 1,
7, 6, 4, 0, 5, 3, 2, 1,
7, 6, 5, 0, 2, 3, 4, 1,
7, 6, 5, 0, 2, 4, 3, 1,
7, 6, 5, 0, 3, 2, 4, 1,
7, 6, 5, 0, 3, 4, 2, 1,
7, 6, 5, 0, 4, 2, 3, 1,
7, 6, 5, 0, 4, 3, 2, 1,
};

int mds[2][2] = { 2,1,3,2 };

uint8_t Tbox1[256] = { 106,230,232,219,82,71,93,235,88,166,9,79,157,104,20,66,
108,54,237,190,129,1,171,89,161,109,214,210,99,203,175,206,
44,249,119,252,152,192,215,140,164,72,36,98,94,153,196,127,
124,184,174,150,250,40,245,165,186,58,130,229,55,116,138,197,
187,120,22,173,133,16,167,170,101,114,195,102,160,216,83,85,
163,60,48,134,144,176,24,122,91,234,67,222,13,202,80,126,
240,156,243,151,35,68,5,181,220,211,77,223,17,115,146,84,
227,208,212,51,45,95,233,78,251,4,47,69,76,7,221,3,
2,213,254,121,162,49,59,241,111,194,143,63,23,199,0,42,
117,244,12,209,14,158,135,183,96,70,112,231,43,123,27,224,
159,87,21,218,253,238,56,75,191,34,62,41,248,38,8,228,
242,90,30,64,52,105,50,147,201,188,19,113,31,149,107,200,
239,37,18,100,29,185,236,193,81,128,39,25,247,217,177,198,
65,28,189,225,180,32,103,154,15,131,246,182,169,142,136,110,
204,145,205,172,148,155,10,139,207,53,178,92,118,97,141,255,
57,132,61,73,179,125,74,26,33,86,46,6,11,137,168,226, };
uint8_t Tbox2[256] = { 75,182,242,159,71,150,30,52,15,180,81,34,252,0,69,166,
78,98,167,165,3,149,138,91,56,2,24,169,40,164,222,72,
79,236,112,97,156,35,68,211,239,192,43,11,77,245,136,33,
21,8,212,121,64,85,74,116,38,106,92,48,223,83,127,125,
45,225,231,131,23,50,6,218,26,109,183,157,250,243,44,104,
76,57,238,86,255,46,59,60,251,27,135,132,55,7,201,53,
197,137,237,93,175,62,20,213,134,12,73,158,230,65,151,171,
232,153,124,174,10,210,200,107,123,209,189,9,39,102,19,206,
141,61,22,28,17,194,227,160,54,25,202,140,199,94,248,247,
5,226,217,221,184,143,176,154,246,29,129,128,190,42,214,144,
122,110,229,241,51,142,195,114,186,58,111,244,66,249,168,100,
191,36,185,96,155,133,198,49,117,178,90,204,173,47,253,88,
87,101,240,84,152,4,187,233,31,41,177,146,139,188,181,82,
37,103,115,170,215,105,118,163,228,254,219,13,99,32,63,220,
70,145,80,162,148,108,235,67,113,216,18,147,193,179,14,196,
120,119,172,203,16,89,205,234,130,161,224,208,207,95,1,126, };
uint8_t Tbox3[256] = { 106,38,181,101,200,63,154,95,54,57,34,44,65,73,80,233,
160,191,121,161,202,171,122,9,173,159,251,113,245,24,74,35,
116,13,21,45,206,158,155,199,174,72,190,249,224,225,175,59,
64,107,86,188,30,131,246,14,26,112,87,195,11,18,105,203,
230,177,192,31,185,4,179,214,140,194,120,75,247,217,96,248,
187,229,157,115,90,197,49,137,133,19,78,198,39,180,28,88,
127,55,37,226,20,117,168,145,215,33,85,150,29,123,111,1,
118,110,243,99,240,211,47,204,151,23,109,41,15,12,108,220,
83,218,193,170,209,51,178,84,237,196,67,216,231,22,184,213,
166,102,8,162,40,169,76,130,207,208,136,163,42,135,6,186,
3,91,119,156,92,46,16,244,176,149,147,210,61,227,27,142,
50,141,114,183,222,144,201,52,53,56,172,0,205,253,212,79,
43,189,134,164,182,98,81,60,235,126,125,232,143,254,32,223,
219,255,153,17,82,241,69,77,167,7,239,71,36,252,129,124,
238,104,2,221,5,48,94,10,242,68,103,165,234,89,138,228,
128,132,62,139,66,152,146,100,25,97,70,58,250,148,236,93, };

uint8_t Tbox1_inv[256] = { 142,21,128,127,121,102,251,125,174,10,230,252,146,92,148,216,
69,108,194,186,14,162,66,140,86,203,247,158,209,196,178,188,
213,248,169,100,42,193,173,202,53,171,143,156,32,116,250,122,
82,133,182,115,180,233,17,60,166,240,57,134,81,242,170,139,
179,208,15,90,101,123,153,5,41,243,246,167,124,106,119,11,
94,200,4,78,111,79,249,161,8,23,177,88,235,6,44,117,
152,237,43,28,195,72,75,214,13,181,0,190,16,25,223,136,
154,187,73,109,61,144,236,34,65,131,87,157,48,245,95,47,
201,20,58,217,241,68,83,150,222,253,62,231,39,238,221,138,
84,225,110,183,228,189,51,99,36,45,215,229,97,12,149,160,
76,24,132,80,40,55,9,70,254,220,71,22,227,67,50,30,
85,206,234,244,212,103,219,151,49,197,56,64,185,210,19,168,
37,199,137,74,46,63,207,141,191,184,93,29,224,226,31,232,
113,147,27,105,114,129,26,38,77,205,163,3,104,126,91,107,
159,211,255,112,175,59,1,155,2,118,89,7,198,18,165,192,
96,135,176,98,145,54,218,204,172,33,52,120,35,164,130,239, };
uint8_t Tbox2_inv[256] = { 13,254,25,20,197,144,70,93,49,123,116,43,105,219,238,8,
244,132,234,126,102,48,130,68,26,137,72,89,131,153,6,200,
221,47,11,37,177,208,56,124,28,201,157,42,78,64,85,189,
59,183,69,164,7,95,136,92,24,81,169,86,87,129,101,222,
52,109,172,231,38,14,224,4,31,106,54,0,80,44,16,32,
226,10,207,61,195,53,83,192,191,245,186,23,58,99,141,253,
179,35,17,220,175,193,125,209,79,213,57,119,229,73,161,170,
34,232,167,210,55,184,214,241,240,51,160,120,114,63,255,62,
155,154,248,67,91,181,104,90,46,97,22,204,139,128,165,149,
159,225,203,235,228,21,5,110,196,113,151,180,36,75,107,3,
135,249,227,215,29,19,15,18,174,27,211,111,242,188,115,100,
150,202,185,237,9,206,1,74,148,178,168,198,205,122,156,176,
41,236,133,166,239,96,182,140,118,94,138,243,187,246,127,252,
251,121,117,39,50,103,158,212,233,146,71,218,223,147,30,60,
250,65,145,134,216,162,108,66,112,199,247,230,33,98,82,40,
194,163,2,77,171,45,152,143,142,173,76,88,12,190,217,84, };
uint8_t Tbox3_inv[256] = { 187,111,226,160,69,228,158,217,146,23,231,60,125,33,55,124,
166,211,61,89,100,34,141,121,29,248,56,174,94,108,52,67,
206,105,10,31,220,98,1,92,148,123,156,192,11,35,165,118,
229,86,176,133,183,184,8,97,185,9,251,47,199,172,242,5,
48,12,244,138,233,214,250,219,41,13,30,75,150,215,90,191,
14,198,212,128,135,106,50,58,95,237,84,161,164,255,230,7,
78,249,197,115,247,3,145,234,225,62,0,49,126,122,113,110,
57,27,178,83,32,101,112,162,74,18,22,109,223,202,201,96,
240,222,151,53,241,88,194,157,154,87,238,243,72,177,175,204,
181,103,246,170,253,169,107,120,245,210,6,38,163,82,37,25,
16,19,147,155,195,235,144,216,102,149,131,21,186,24,40,46,
168,65,134,70,93,2,196,179,142,68,159,80,51,193,42,17,
66,130,73,59,137,85,91,39,4,182,20,63,119,188,36,152,
153,132,171,117,190,143,71,104,139,77,129,208,127,227,180,207,
44,45,99,173,239,81,64,140,203,15,236,200,254,136,224,218,
116,213,232,114,167,28,54,76,79,43,252,26,221,189,205,209, };


uint8_t Tbox1_recovered[256] = { 119, 38, 146, 0, 207, 249, 220, 144, 218, 174, 141, 241, 124, 114, 235, 255, 115, 94, 148, 166, 213, 181, 224, 221, 173, 116, 30, 31, 152, 64, 225, 70, 51, 45, 81, 43, 122, 10, 25, 195, 171, 242, 19, 159, 222, 125, 11, 185, 187, 162, 230, 110, 47, 50, 76, 172, 167, 103, 215, 36, 89, 83, 199, 12, 160, 186, 238, 228, 212, 234, 169, 231, 156, 87, 8, 158, 170, 2, 200, 204, 168, 99, 90, 214, 106, 130, 58, 191, 216, 151, 248, 6, 140, 71, 202, 190, 74, 123, 72, 105, 16, 251, 180, 132, 3, 24, 244, 1, 237, 80, 111, 203, 32, 26, 27, 88, 52, 217, 149, 246, 40, 179, 49, 252, 243, 177, 4, 176, 183, 28, 46, 189, 175, 93, 96, 77, 113, 15, 193, 97, 233, 9, 178, 55, 84, 75, 139, 29, 142, 126, 209, 129, 154, 254, 82, 33, 48, 184, 56, 34, 121, 201, 236, 7, 44, 150, 98, 240, 161, 23, 102, 53, 42, 22, 138, 35, 79, 223, 62, 250, 91, 117, 95, 104, 69, 163, 232, 85, 57, 108, 112, 66, 145, 20, 239, 155, 60, 165, 147, 13, 205, 210, 17, 61, 73, 5, 133, 14, 253, 59, 164, 37, 131, 18, 153, 127, 137, 208, 78, 134, 229, 198, 194, 118, 67, 109, 68, 227, 107, 120, 143, 192, 65, 92, 135, 219, 86, 157, 196, 41, 101, 211, 100, 245, 128, 188, 247, 63, 21, 206, 54, 182, 136, 197, 226, 39 };
uint8_t Tbox2_recovered[256] = { 199, 42, 82, 4, 8, 139, 118, 44, 66, 173, 70, 16, 26, 7, 220, 32, 5, 76, 110, 18, 12, 170, 186, 48, 209, 164, 15, 78, 237, 6, 51, 52, 161, 188, 187, 250, 234, 253, 172, 64, 72, 147, 241, 182, 62, 165, 29, 80, 196, 13, 174, 111, 39, 88, 96, 124, 213, 104, 112, 120, 162, 25, 43, 128, 249, 65, 134, 100, 218, 125, 231, 229, 180, 169, 144, 152, 61, 54, 183, 210, 211, 236, 168, 193, 73, 21, 176, 146, 149, 50, 159, 184, 71, 192, 105, 74, 200, 151, 11, 46, 68, 233, 150, 58, 47, 17, 31, 216, 102, 81, 224, 45, 19, 212, 243, 83, 189, 194, 254, 109, 240, 248, 35, 219, 121, 135, 75, 245, 0, 205, 222, 20, 247, 10, 91, 221, 9, 163, 198, 138, 24, 226, 191, 69, 252, 90, 53, 93, 228, 40, 195, 153, 63, 79, 95, 214, 115, 101, 154, 175, 178, 56, 55, 215, 126, 225, 143, 57, 37, 49, 145, 204, 99, 235, 92, 87, 22, 202, 108, 190, 251, 227, 131, 33, 197, 179, 148, 14, 3, 77, 156, 223, 98, 38, 203, 94, 59, 133, 136, 177, 67, 114, 106, 142, 123, 117, 116, 171, 130, 160, 103, 157, 89, 119, 84, 155, 242, 207, 140, 206, 30, 132, 181, 246, 34, 2, 217, 185, 141, 113, 208, 238, 167, 60, 107, 28, 255, 1, 97, 166, 23, 232, 129, 137, 36, 239, 122, 230, 244, 41, 127, 158, 201, 85, 27, 86 };
uint8_t Tbox3_recovered[256] = { 181, 117, 10, 203, 157, 16, 101, 28, 170, 166, 211, 187, 40, 115, 103, 255, 132, 72, 124, 100, 78, 141, 94, 217, 175, 129, 186, 140, 210, 196, 147, 92, 62, 11, 206, 237, 239, 162, 113, 152, 243, 231, 47, 26, 85, 108, 227, 254, 118, 59, 81, 238, 12, 208, 71, 97, 111, 74, 146, 232, 75, 143, 149, 34, 171, 116, 106, 31, 4, 24, 27, 220, 253, 167, 98, 164, 9, 42, 55, 64, 188, 6, 91, 119, 49, 88, 191, 67, 2, 134, 214, 127, 3, 45, 112, 35, 148, 233, 178, 110, 19, 136, 130, 156, 137, 194, 105, 219, 213, 69, 70, 135, 252, 155, 226, 58, 150, 65, 61, 7, 114, 223, 173, 22, 87, 182, 248, 133, 30, 142, 222, 228, 8, 33, 174, 51, 73, 246, 234, 32, 102, 48, 60, 154, 63, 125, 250, 207, 80, 96, 236, 44, 172, 50, 39, 17, 53, 41, 159, 93, 57, 245, 151, 183, 128, 68, 161, 20, 160, 201, 176, 84, 95, 230, 179, 199, 138, 192, 23, 197, 89, 216, 1, 123, 221, 242, 202, 36, 79, 240, 225, 145, 82, 0, 107, 189, 249, 195, 52, 38, 205, 99, 190, 169, 56, 86, 163, 5, 121, 66, 185, 14, 131, 25, 43, 104, 165, 153, 13, 109, 235, 193, 158, 218, 122, 120, 215, 180, 46, 251, 144, 77, 76, 168, 244, 90, 212, 83, 15, 184, 21, 204, 200, 247, 139, 29, 54, 177, 37, 224, 126, 198, 229, 241, 209, 18 };
uint8_t Tbox4_recovered[256] = { 229,157,137,90,49,197,187,115,149,147,142,61,27,227,176,210,196,67,213,231,184,22,237,216,112,87,203,11,105,18,26,195,38,181,95,200,154,63,106,101,55,37,145,20,168,117,127,226,91,119,244,92,16,46,3,156,23,109,220,15,108,12,151,41,33,85,1,29,111,123,215,150,218,193,84,209,178,51,83,170,57,34,233,65,80,73,54,44,102,8,130,40,76,169,166,162,255,153,77,82,69,241,219,17,97,70,93,250,236,148,25,58,68,103,228,234,138,89,242,165,56,172,79,205,212,253,53,0,132,62,100,66,146,152,128,139,159,251,35,245,74,24,173,113,107,86,14,30,246,131,64,188,19,78,88,39,28,180,133,198,110,243,204,240,47,211,118,99,194,120,248,247,96,217,140,75,189,134,60,182,81,98,43,164,177,192,214,185,179,4,230,31,141,114,52,222,201,144,50,183,191,121,9,202,122,171,160,161,208,136,186,42,6,135,207,163,72,190,59,224,175,225,174,249,7,239,124,36,129,252,167,71,126,125,223,143,32,254,235,232,104,2,10,5,94,48,238,221,13,21,199,206,155,158,116,45, };


uint8_t Tbox1_recovered_inv[256] = { 3, 107, 77, 104, 126, 205, 91, 163, 74, 141, 37, 46, 63, 199, 207, 137, 100, 202, 213, 42, 193, 248, 173, 169, 105, 38, 113, 114, 129, 147, 26, 27, 112, 155, 159, 175, 59, 211, 1, 255, 120, 239, 172, 35, 164, 33, 130, 52, 156, 122, 53, 32, 116, 171, 250, 143, 158, 188, 86, 209, 196, 203, 178, 247, 29, 232, 191, 224, 226, 184, 31, 93, 98, 204, 96, 145, 54, 135, 218, 176, 109, 34, 154, 61, 144, 187, 236, 73, 115, 60, 82, 180, 233, 133, 17, 182, 134, 139, 166, 81, 242, 240, 170, 57, 183, 99, 84, 228, 189, 225, 51, 110, 190, 136, 13, 16, 25, 181, 223, 0, 229, 160, 36, 97, 12, 45, 149, 215, 244, 151, 85, 212, 103, 206, 219, 234, 252, 216, 174, 146, 92, 10, 148, 230, 7, 192, 2, 198, 18, 118, 165, 89, 28, 214, 152, 195, 72, 237, 75, 43, 64, 168, 49, 185, 210, 197, 19, 56, 80, 70, 76, 40, 55, 24, 9, 132, 127, 125, 142, 121, 102, 21, 251, 128, 157, 47, 65, 48, 245, 131, 95, 87, 231, 138, 222, 39, 238, 253, 221, 62, 78, 161, 94, 111, 79, 200, 249, 4, 217, 150, 201, 241, 68, 20, 83, 58, 88, 117, 8, 235, 6, 23, 44, 177, 22, 30, 254, 227, 67, 220, 50, 71, 186, 140, 69, 14, 162, 108, 66, 194, 167, 11, 41, 124, 106, 243, 119, 246, 90, 5, 179, 101, 123, 208, 153, 15 };
uint8_t Tbox2_recovered_inv[256] = { 128, 237, 225, 188, 3, 16, 29, 13, 4, 136, 133, 98, 20, 49, 187, 26, 11, 105, 19, 112, 131, 85, 176, 240, 140, 61, 12, 254, 235, 46, 220, 106, 15, 183, 224, 122, 244, 168, 193, 52, 149, 249, 1, 62, 7, 111, 99, 104, 23, 169, 89, 30, 31, 146, 77, 162, 161, 167, 103, 196, 233, 76, 44, 152, 39, 65, 8, 200, 100, 143, 10, 92, 40, 84, 95, 126, 17, 189, 27, 153, 47, 109, 2, 115, 214, 253, 255, 175, 53, 212, 145, 134, 174, 147, 195, 154, 54, 238, 192, 172, 67, 157, 108, 210, 57, 94, 202, 234, 178, 119, 18, 51, 58, 229, 201, 156, 206, 205, 6, 213, 59, 124, 246, 204, 55, 69, 164, 250, 63, 242, 208, 182, 221, 197, 66, 125, 198, 243, 139, 5, 218, 228, 203, 166, 74, 170, 87, 41, 186, 88, 102, 97, 75, 151, 158, 215, 190, 211, 251, 90, 209, 32, 60, 137, 25, 45, 239, 232, 82, 73, 21, 207, 38, 9, 50, 159, 86, 199, 160, 185, 72, 222, 43, 78, 91, 227, 22, 34, 33, 116, 179, 142, 93, 83, 117, 150, 48, 184, 138, 0, 96, 252, 177, 194, 171, 129, 219, 217, 230, 24, 79, 80, 113, 56, 155, 163, 107, 226, 68, 123, 14, 135, 130, 191, 110, 165, 141, 181, 148, 71, 247, 70, 241, 101, 36, 173, 81, 28, 231, 245, 120, 42, 216, 114, 248, 127, 223, 132, 121, 64, 35, 180, 144, 37, 118, 236 };
uint8_t Tbox3_recovered_inv[256] = { 193, 182, 88, 92, 68, 207, 81, 119, 132, 76, 2, 33, 52, 218, 211, 238, 5, 155, 255, 100, 167, 240, 123, 178, 69, 213, 43, 70, 7, 245, 128, 67, 139, 133, 63, 95, 187, 248, 199, 154, 12, 157, 77, 214, 151, 93, 228, 42, 141, 84, 153, 135, 198, 156, 246, 78, 204, 160, 115, 49, 142, 118, 32, 144, 79, 117, 209, 87, 165, 109, 110, 54, 17, 136, 57, 60, 232, 231, 20, 188, 148, 50, 192, 237, 171, 44, 205, 124, 85, 180, 235, 82, 31, 159, 22, 172, 149, 55, 74, 201, 19, 6, 140, 14, 215, 106, 66, 194, 45, 219, 99, 56, 94, 38, 120, 13, 65, 1, 48, 83, 225, 208, 224, 183, 18, 145, 250, 91, 164, 25, 102, 212, 16, 127, 89, 111, 101, 104, 176, 244, 27, 21, 129, 61, 230, 191, 58, 30, 96, 62, 116, 162, 39, 217, 143, 113, 103, 4, 222, 158, 168, 166, 37, 206, 75, 216, 9, 73, 233, 203, 8, 64, 152, 122, 134, 24, 170, 247, 98, 174, 227, 0, 125, 163, 239, 210, 26, 11, 80, 195, 202, 86, 177, 221, 105, 197, 29, 179, 251, 175, 242, 169, 186, 3, 241, 200, 34, 147, 53, 254, 28, 10, 236, 108, 90, 226, 181, 23, 223, 107, 71, 184, 130, 121, 249, 190, 114, 46, 131, 252, 173, 41, 59, 97, 138, 220, 150, 35, 51, 36, 189, 253, 185, 40, 234, 161, 137, 243, 126, 196, 146, 229, 112, 72, 47, 15 };
uint8_t Tbox4_recovered_inv[256] = { 127, 66, 241, 54, 189, 243, 212, 224, 89, 202, 242, 27, 61, 248, 146, 59, 52, 103, 29, 152, 43, 249, 21, 56, 141, 110, 30, 12, 156, 67, 147, 191, 236, 64, 81, 138, 227, 41, 32, 155, 91, 63, 211, 182, 87, 255, 53, 164, 245, 4, 198, 77, 194, 126, 86, 40, 120, 80, 111, 218, 178, 11, 129, 37, 150, 83, 131, 17, 112, 100, 105, 231, 216, 85, 140, 175, 92, 98, 153, 122, 84, 180, 99, 78, 74, 65, 145, 25, 154, 117, 3, 48, 51, 106, 244, 34, 172, 104, 181, 167, 130, 39, 88, 113, 240, 28, 38, 144, 60, 57, 160, 68, 24, 143, 193, 7, 254, 45, 166, 49, 169, 201, 204, 69, 226, 233, 232, 46, 134, 228, 90, 149, 128, 158, 177, 213, 209, 2, 116, 135, 174, 192, 10, 235, 197, 42, 132, 9, 109, 8, 71, 62, 133, 97, 36, 252, 55, 1, 253, 136, 206, 207, 95, 215, 183, 119, 94, 230, 44, 93, 79, 205, 121, 142, 222, 220, 14, 184, 76, 188, 157, 33, 179, 199, 20, 187, 210, 6, 151, 176, 217, 200, 185, 73, 168, 31, 16, 5, 159, 250, 35, 196, 203, 26, 162, 123, 251, 214, 208, 75, 15, 165, 124, 18, 186, 70, 23, 173, 72, 102, 58, 247, 195, 234, 219, 221, 47, 13, 114, 0, 190, 19, 239, 82, 115, 238, 108, 22, 246, 225, 163, 101, 118, 161, 50, 139, 148, 171, 170, 223, 107, 137, 229, 125, 237, 96 };

int Xtimes_4(int x) {
	return (((x << 1)) ^ ((x & 0x08) ? 0x03 : 0x00)) & 0x0F;
}

uint8_t gf_mul(int x, int y) {
	int temp[2];
	for (int i = 0; i < 2; i++) {
		if (i == 0) {
			temp[i] = y;
		}
		else {
			temp[i] = Xtimes_4(temp[i - 1]);
		}
	}
	uint8_t res = 0;
	for (int i = 0; i < 2; i++) {
		res = res ^ ((x >> i) & 0x01) * temp[i];
	}
	return res;
}

uint8_t cal_mds_sbox(uint8_t x, uint8_t y) {
	uint8_t m = gf_mul(2, x) ^ gf_mul(1, y);
	uint8_t n = gf_mul(3, x) ^ gf_mul(2, y);
	uint8_t res = (m << 4) + n;
	return res;
}

//Round funtion to generate Tbox
uint8_t gen_Tbox_round_fun(uint8_t rkey, uint8_t input) {
	int sbox[16] = { 14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7 };

	uint8_t l4 = (input >> 4) & 0x0F;
	uint8_t r4 = input & 0x0F;
	l4 = sbox[l4];
	r4 = sbox[r4];
	uint8_t rst = cal_mds_sbox(l4, r4);
	rst = rst ^ rkey;
	return rst;

}

//Generate Tbox
void gen_Tbox(uint8_t sbox8[]) {

	uint8_t key[32] = {};
	unsigned seed1 = std::chrono::system_clock::now().time_since_epoch().count();
	std::mt19937 g1(seed1);  // mt19937 is a standard mersenne_twister_engine

	for (int i = 0; i < 32; i++) {
		key[i] = g1() & 0x0FF;
	}
	for (int i = 0; i < 256; i++) {
		sbox8[i] = i;
		for (int j = 0; j < 32; j++) {
			sbox8[i] = gen_Tbox_round_fun(key[j], sbox8[i]);
		}
	}

	for (int i = 0; i < 256; i++) {
		if (i % 16 == 0) cout << endl;
		cout << int(sbox8[i]) << ",";
	}

	cout << endl;
	cout << endl;

}

//Generate the inverse of Tbox
void gen_Tbox_inv(uint8_t sbox[], uint8_t sbox_inv[]) {
	for (int i = 0; i < 256; i++) {
		sbox_inv[sbox[i]] = i;
	}
	for (int i = 0; i < 256; i++) {
		if (i % 16 == 0) cout << endl;
		cout << int(sbox_inv[i]) << "," ;
	}

}



uint8_t Xtime_3(uint8_t x) {
	return (((x << 1)) ^ ((x & 0x04) ? 0x03 : 0x00)) & 0x07;
}


uint16_t linearlayer(uint16_t mds_input) {

	uint8_t M3[4][4] = {
	6,2,4,1,
	2,6,1,4,
	4,1,6,2,
	1,4,2,6
	};

	uint8_t temp[4][3] = { 0 };
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 3; j++) {
			if (j == 0) {
				temp[i][j] = (mds_input >> ((3 - i) * 3)) & 0x07;
			}
			else {
				temp[i][j] = Xtime_3(temp[i][j - 1]);
			}
		}
	}

	uint16_t mds_ret = 0;
	for (int i = 0; i < 4; i++) {
		uint8_t tempsum = 0;
		for (int j = 0; j < 4; j++) {
			uint8_t tempmultiply = 0;
			for (int k = 0; k < 3; k++) {
				tempmultiply ^= ((M3[i][j] >> k) & 0x01) * temp[j][k];
			}
			tempsum = tempsum ^ tempmultiply;
		}
		mds_ret = mds_ret << 3;
		mds_ret = mds_ret | tempsum;
	}
	return mds_ret;
}

uint32_t first_round(uint32_t input) {
	uint32_t output = 0;
	
	uint8_t table_in = 0;
	
	uint16_t mds_input = 0;
	for (int i = 0; i < 4; i++) {
		output = output << 8;
		mds_input = mds_input << 3;
		table_in = (input >> ((3 - i) * 8)) & 0x0FF;
		uint8_t table_out = Tbox1[table_in];
		output = output | table_out;
		mds_input = mds_input | (table_out & 0x07);
	}

	uint16_t mds_ret = linearlayer(mds_input);

	output = output & 0xf8f8f8f8;
	uint32_t k = 0;
	for (int i = 0; i < 4; i++) {
		k = k << 8;
		k = k | ((mds_ret >> ((3 - i) * 3)) & 0x07);
	}
	output = output | k;
	return output;
}

uint32_t mid_round(uint32_t input) {
	uint32_t output = 0;
	
	uint8_t table_in = 0;

	uint16_t mds_input = 0;
	for (int i = 0; i < 4; i++) {
		output = output << 8;
		mds_input = mds_input << 3;
		table_in = (input >> ((3 - i) * 8)) & 0x0FF;
		uint8_t table_out = Tbox2[table_in];
		output = output | table_out;
		mds_input = mds_input | (table_out & 0x07);
	}

	uint16_t mds_ret = linearlayer(mds_input);

	output = output & 0xf8f8f8f8;
	uint32_t k = 0;
	for (int i = 0; i < 4; i++) {
		k = k << 8;
		k = k | ((mds_ret >> ((3 - i) * 3)) & 0x07);
	}
	output = output | k;
	return output;
}

uint32_t last_round(uint32_t input) {
	uint32_t output = 0;
	
	uint8_t table_in = 0;
	for (int i = 0; i < 4; i++) {
		output = output << 8;
		table_in = (input >> ((3 - i) * 8)) & 0x0FF;
		uint8_t table_out = Tbox3[table_in];
		output = output | table_out;

	}
	return output;
}

//encryption oracle
uint32_t yoroi(uint32_t input) {
	input = first_round(input);
	for (int i = 0; i < 2; i++) {
		input = mid_round(input);
	}
	input = last_round(input);
	return input;
}


uint32_t lastround_inverse(uint32_t input) {
	uint32_t output = 0;
	
	uint8_t table_in = 0;
	for (int i = 0; i < 4; i++) {
		output = output << 8;
		table_in = (input >> ((3 - i) * 8)) & 0x0FF;
		uint8_t table_out = Tbox3_inv[table_in];
		output = output | table_out;

	}
	return output;
}

uint32_t midround_inverse(uint32_t input) {
	uint32_t output = 0;
	
	uint8_t table_in = 0;
	
	uint16_t mds_input = 0;
	//output = input;
	for (int i = 0; i < 4; i++) {
		//output = output << 8;
		mds_input = mds_input << 3;
		//table_in = (input >> ((3 - i) * 8)) & 0x0FF;
		//uint8_t table_out = sbox2[table_in];
		//output = output | table_out;

		mds_input = mds_input | ((input >> (3 - i) * 8) & 0x07);
	}

	uint16_t mds_ret = linearlayer(mds_input);

	output = input & 0xf8f8f8f8;
	uint32_t k = 0;
	for (int i = 0; i < 4; i++) {
		k = k << 8;
		k = k | ((mds_ret >> ((3 - i) * 3)) & 0x07);
	}
	output = output | k;

	input = output;
	output = 0;

	for (int i = 0; i < 4; i++) {
		output = output << 8;
		table_in = (input >> ((3 - i) * 8)) & 0x0FF;
		uint8_t table_out = Tbox2_inv[table_in];
		output = output | table_out;
	}


	return output;
}

uint32_t firstround_inverse(uint32_t input) {
	uint32_t output = 0;
	
	uint8_t table_in = 0;
	
	uint16_t mds_input = 0;
	//output = input;
	for (int i = 0; i < 4; i++) {
		//output = output << 8;
		mds_input = mds_input << 3;
		//table_in = (input >> ((3 - i) * 8)) & 0x0FF;
		//uint8_t table_out = sbox2[table_in];
		//output = output | table_out;

		mds_input = mds_input | ((input >> (3 - i) * 8) & 0x07);
	}

	uint16_t mds_ret = linearlayer(mds_input);

	output = input & 0xf8f8f8f8;
	uint32_t k = 0;
	for (int i = 0; i < 4; i++) {
		k = k << 8;
		k = k | ((mds_ret >> ((3 - i) * 3)) & 0x07);
	}
	output = output | k;

	input = output;
	output = 0;

	for (int i = 0; i < 4; i++) {
		output = output << 8;
		table_in = (input >> ((3 - i) * 8)) & 0x0FF;
		uint8_t table_out = Tbox1_inv[table_in];
		output = output | table_out;
	}

	return output;
}

//decryption oracle
uint32_t yoroi_inverse(uint32_t input) {
	uint32_t output = lastround_inverse(input);
	for (int i = 0; i < 2; i++) {
		output = midround_inverse(output);
	}
	output = firstround_inverse(output);
	return output;
}


void DivideIntoAi_FirstRound() {
	unsigned seed1 = std::chrono::system_clock::now().time_since_epoch().count();
	std::mt19937 g1(seed1);  // mt19937 is a standard mersenne_twister_engine

	for (int p = 0; p < 16; p++) {
		uint32_t r = g1();
		uint32_t structure[256] = { 0 };
		for (int i = 0; i < 256; i++) {
			structure[i] = (i << 24) ^ (r & 0x00FFFFFF);
			structure[i] = yoroi(structure[i]);
		}

		for (int i = 0; i < 256; i++) {
			for (int j = i + 1; j < 256; j++) {
				if (((structure[i] ^ structure[j]) & 0x00FFFFFF) == 0) {
					cout << "{" << i << "," << j << "},";
				}
			}
		}
	}


}


//Get goodpairs in CC set
void GetGoodPairs_FirstRound() {
	unsigned seed1 = std::chrono::system_clock::now().time_since_epoch().count();
	std::mt19937 g1(seed1);  // mt19937 is a standard mersenne_twister_engine
	uint32_t r = g1();
	uint32_t ciphertext1 = 0;
	uint32_t ciphertext2 = 0;

	for (int i = 0; i < 1024; i++) {
		ciphertext1 = g1();
		ciphertext2 = g1();
		ciphertext2 = ciphertext2 & 0xFF000000;
		ciphertext2 = (ciphertext1 & 0x00FFFFFF) ^ ciphertext2;
		if (ciphertext1 == ciphertext2) {
			i--;
			continue;
		}
		//goodpairs[i][0] = yoroi_inverse(ciphertext1);
		//goodpairs[i][1] = yoroi_inverse(ciphertext2);
		cout << std::hex << "0x" << yoroi_inverse(ciphertext1) << ",0x" << yoroi_inverse(ciphertext2) <<"," << endl;
	}


}


//Output difference of the linear layer in the first round under permutation
uint16_t ThetaPiFA_FirstRound(uint32_t input1, uint32_t input2, uint8_t p[]) {
	uint8_t table_in1 = 0;
	uint16_t mds_input1 = 0;
	uint8_t table_in2 = 0;
	uint16_t mds_input2 = 0;
	uint8_t temp = 0;

	uint8_t lsb[256] = {
		2, 6, 0, 3, 2, 7, 5, 3, 0, 6, 1, 7, 5, 0, 4, 2, 4, 6, 5, 6, 1, 1, 3,
		1, 1, 5, 6, 2, 3, 3, 7, 6, 4, 1, 7, 4, 0, 0, 7, 4, 4, 0, 4, 2, 6, 1,
		4, 7, 4, 0, 6, 6, 2, 0, 5, 5, 2, 2, 2, 5, 7, 4, 2, 5, 3, 0, 6, 5, 5, 
		0, 7, 2, 5, 2, 3, 6, 0, 0, 3, 5, 3, 4, 0, 6, 0, 0, 0, 2, 3, 2, 3, 6, 
		5, 2, 0, 6, 0, 4, 3, 7, 3, 4, 5, 5, 4, 3, 5, 7, 1, 3, 2, 4, 3, 0, 4, 
		3, 5, 7, 1, 6, 3, 4, 7, 5, 4, 7, 5, 3, 2, 5, 6, 1, 2, 1, 3, 1, 7, 2, 
		7, 7, 7, 7, 0, 2, 5, 4, 4, 1, 6, 6, 7, 7, 0, 6, 0, 7, 3, 3, 3, 0, 7,
		7, 5, 2, 5, 6, 0, 3, 7, 2, 6, 1, 0, 6, 0, 4, 2, 2, 6, 0, 4, 1, 2, 3,
		1, 4, 3, 1, 7, 5, 3, 0, 7, 5, 2, 4, 5, 1, 4, 1, 1, 0, 7, 1, 7, 1, 1, 
		6, 1, 4, 5, 1, 4, 0, 7, 2, 7, 3, 6, 6, 1, 6, 0, 6, 4, 1, 5, 4, 4, 3, 
		2, 3, 7, 5, 2, 4, 6, 1, 5, 7, 1, 4, 5, 1, 3, 5, 2, 2, 1, 6, 6, 6, 3, 
		1, 0, 2
	};

	for (int i = 0; i < 4; i++) {
		//output = output << 8;
		mds_input1 = mds_input1 << 3;
		mds_input2 = mds_input2 << 3;
		table_in1 = (input1 >> ((3 - i) * 8)) & 0x0FF;
		table_in2 = (input2 >> ((3 - i) * 8)) & 0x0FF;
		uint8_t table_out1 = lsb[table_in1] & 0x07;
		uint8_t table_out2 = lsb[table_in2] & 0x07;
		temp = p[table_out1];
		mds_input1 = mds_input1 | temp;

		
		temp = p[table_out2];
		mds_input2 = mds_input2 | temp;
	}

	//mds_ret = 
	uint16_t mds_ret1 = linearlayer(mds_input1);
	uint16_t mds_ret2 = linearlayer(mds_input2);
	return mds_ret1 ^ mds_ret2;
}





//get correct permutaion in the first round
void GetCorrectPermutation_FirstRound(uint32_t goodpairs[][2]) {
	int counter[720] = { 0 };
	for (int i = 0; i < 1024; i++) {
		for (int j = 0; j < 720; j++) {
			if ((ThetaPiFA_FirstRound(goodpairs[i][0], goodpairs[i][1] , P[j]) & 0x01FF) == 0) {
				counter[j] = counter[j] + 1;
				//the j-th permutation was recommended by the i-th good pair
				//record[j]->next = new ListNode(i);
			}
		}
	}
	int threshold = 11;
	for (int i = 0; i < 720; i++) {
		if (counter[i] > threshold) {
			cout << i << endl;
		}
	}
	
}



//print the pairs that recommend the correct permutation, 
//the input k is the index of P[k], which is the correct permutation.
void GetPossibleRightPairs_FirstRound(int k, uint32_t goodpairs[][2]) {
	for (int i = 0; i < 1024; i++) {
		
		if ((ThetaPiFA_FirstRound(goodpairs[i][0], goodpairs[i][1], P[k]) & 0x01FF) == 0) {
			cout << std::hex << "0x" << goodpairs[i][0] << ",0x" << goodpairs[i][1] << "," << endl;
		}
	}
}


void GetRightParis_FirstRound(uint32_t possible_right_pairs[][2], uint8_t Ai[][32]) {
	
	for (int i = 0; i < 9; i++) {
		
		uint8_t table_in1 = 0;
		uint8_t table_output1 = 0;
		uint8_t lsb1 = 0;
		uint8_t table_in2 = 0;
		uint8_t table_output2 = 0;
		uint8_t lsb2 = 0;
		table_in1 = possible_right_pairs[i][0] >> 24;
		table_in2 = possible_right_pairs[i][1] >> 24;
		table_output1 = Tbox1[table_in1];
		table_output2 = Tbox1[table_in2];
		lsb1 = P[66][table_output1 & 0x07];
		lsb2 = P[66][table_output2 & 0x07];
		uint8_t zeta1 = lsb1 ^ lsb2;


		for (int j = 0; j < 1; j++) {
			uint32_t plaintext1, plaintext2;
			uint32_t ciphertext1, ciphertext2;
			for (int k = 0; k < 32; k++) {

				plaintext1 = Ai[j][k];
				plaintext1 = plaintext1 << 24;
				plaintext1 = plaintext1 ^ (possible_right_pairs[i][0] & 0x00FFFFFF);
				ciphertext1 = yoroi(plaintext1);

				for (int l = 0; l < 32; l++) {
					plaintext2 = Ai[j^zeta1][k];
					plaintext2 = plaintext2 << 24;
					plaintext2 = plaintext2 ^ (possible_right_pairs[i][1] & 0x00FFFFFF);
					if (plaintext1 == possible_right_pairs[i][0] && plaintext2 == possible_right_pairs[i][1]) {
						continue;
					}
					ciphertext2 = yoroi(plaintext2);
					if (((ciphertext2 ^ ciphertext1) & 0x00FFFFFF) == 0) {
						cout << std::hex << "0x" << possible_right_pairs[i][0] << ",0x" << possible_right_pairs[i][1] << "," << endl;
						goto NEXTPAIR;
					}

				}
			}

		}

	NEXTPAIR:
		cout << "";
		
	}
}

void DivideIntoBj_FirstRound(uint32_t right_pairs[][2], uint8_t Ai[][32]) {
	
	uint8_t zeta[4] = {0};
	for (int i = 0; i < 3; i++) {
		for (int j = 0; j < 4; j++) {
			uint8_t table_in1 = 0;
			uint8_t table_output1 = 0;
			uint8_t lsb1 = 0;
			uint8_t table_in2 = 0;
			uint8_t table_output2 = 0;
			uint8_t lsb2 = 0;
			table_in1 = (right_pairs[i][0] >> (3 - j) * 8) & 0x0FF;
			table_in2 = (right_pairs[i][1] >> (3 - j) * 8) & 0x0FF;
			table_output1 = Tbox1[table_in1];
			table_output2 = Tbox1[table_in2];
			lsb1 = P[66][table_output1 & 0x07];
			lsb2 = P[66][table_output2 & 0x07];
			zeta[j] = lsb1 ^ lsb2;
		}
		uint32_t temp1, temp2, output1, output2;
		for (int j = 0; j < 8; j++) {
			for (int k = 0; k < 8; k++) {
				//for (int l = 0; l < 8; l++) {
					for (int m = 0; m < 8; m++) {
						for (int n = 0; n < 32; n++) {
							temp1 = Ai[j][m];
							temp1 = temp1 << 8;
							temp1 = temp1 ^ Ai[k][n];
							temp1 = temp1 << 16;
							temp1 = temp1 ^ (right_pairs[i][0] & 0x0000FFFF);
							output1 = yoroi(temp1);
							for (int o = 0; o < 8; o++) {
								for (int p = 0; p < 32; p++) {
									temp2 = Ai[j^zeta[0]][o];
									temp2 = temp2 << 8;
									temp2 = temp2 ^ Ai[k ^ zeta[1]][p];
									temp2 = temp2 << 16;
									temp2 = temp2 ^ (right_pairs[i][1] & 0x0000FFFF);
									output2 = yoroi(temp2);
									if (((output1 ^ output2) & 0x00FFFFFF) == 0) {
										cout << "{" << int(Ai[k][n]) << "," << int(Ai[k ^ zeta[1]][p]) << "},";
										goto NEXTPAIRS2;
									}
								}
							}

						NEXTPAIRS2:
							cout << "";
						}
					}
				//}
			}
		}



	}

	


}


uint32_t RecoveredFirstRound(uint32_t input) {
	uint32_t output = 0;

	uint8_t table_in = 0;

	uint16_t mds_input = 0;
	for (int i = 0; i < 4; i++) {
		output = output << 8;
		mds_input = mds_input << 3;
		table_in = (input >> ((3 - i) * 8)) & 0x0FF;
		uint8_t table_out = Tbox1_recovered[table_in];
		output = output | table_out;
		mds_input = mds_input | (table_out & 0x07);
	}

	uint16_t mds_ret = linearlayer(mds_input);

	output = output & 0xf8f8f8f8;
	uint32_t k = 0;
	for (int i = 0; i < 4; i++) {
		k = k << 8;
		k = k | ((mds_ret >> ((3 - i) * 3)) & 0x07);
	}
	output = output | k;
	return output;
}

uint32_t RecoveredFirstRoundInverse(uint32_t input) {
	uint32_t output = 0;

	uint8_t table_in = 0;

	uint16_t mds_input = 0;
	//output = input;
	for (int i = 0; i < 4; i++) {
		//output = output << 8;
		mds_input = mds_input << 3;
		//table_in = (input >> ((3 - i) * 8)) & 0x0FF;
		//uint8_t table_out = sbox2[table_in];
		//output = output | table_out;

		mds_input = mds_input | ((input >> (3 - i) * 8) & 0x07);
	}

	uint16_t mds_ret = linearlayer(mds_input);

	output = input & 0xf8f8f8f8;
	uint32_t k = 0;
	for (int i = 0; i < 4; i++) {
		k = k << 8;
		k = k | ((mds_ret >> ((3 - i) * 3)) & 0x07);
	}
	output = output | k;

	input = output;
	output = 0;

	for (int i = 0; i < 4; i++) {
		output = output << 8;
		table_in = (input >> ((3 - i) * 8)) & 0x0FF;
		uint8_t table_out = Tbox1_recovered_inv[table_in];
		output = output | table_out;
	}

	return output;
}

void DivideIntoAi_SecondRound() {
	unsigned seed1 = std::chrono::system_clock::now().time_since_epoch().count();
	std::mt19937 g1(seed1);  // mt19937 is a standard mersenne_twister_engine
	
	
	for (int p = 0; p < 8; p++) {
		uint32_t r = g1();
		uint32_t structure[256] = { 0 };
		for (int i = 0; i < 256; i++) {
			structure[i] = (i << 24) ^ (r & 0x00FFFFFF);
			structure[i] = RecoveredFirstRoundInverse(structure[i]);
			structure[i] = yoroi(structure[i]);
		}

		for (int i = 0; i < 256; i++) {
			for (int j = i + 1; j < 256; j++) {
				if (((structure[i] ^ structure[j]) & 0x00FFFFFF) == 0) {
					cout << "{" << i << "," << j << "},";
				}
			}
		}
	}
	

}

void GetGoodPairs_SecondRound() {
	unsigned seed1 = std::chrono::system_clock::now().time_since_epoch().count();
	std::mt19937 g1(seed1);  // mt19937 is a standard mersenne_twister_engine
	uint32_t r = g1();
	uint32_t ciphertext1 = 0;
	uint32_t ciphertext2 = 0;

	for (int i = 0; i < 512; i++) {
		ciphertext1 = g1();
		ciphertext2 = g1();
		ciphertext2 = ciphertext2 & 0xFF000000;
		ciphertext2 = (ciphertext1 & 0x00FFFFFF) ^ ciphertext2;
		if (ciphertext1 == ciphertext2) {
			i--;
			continue;
		}
		//goodpairs[i][0] = yoroi_inverse(ciphertext1);
		//goodpairs[i][1] = yoroi_inverse(ciphertext2);
		cout << std::hex << "0x" << RecoveredFirstRound(yoroi_inverse(ciphertext1)) << ",0x" << RecoveredFirstRound(yoroi_inverse(ciphertext2)) << "," << endl;
	}


}

uint16_t ThetaPiFA_SecondRound(uint32_t input1, uint32_t input2, uint8_t p[]) {
	uint8_t table_in1 = 0;
	uint16_t mds_input1 = 0;
	uint8_t table_in2 = 0;
	uint16_t mds_input2 = 0;
	uint8_t temp = 0;

	uint8_t lsb[256] = {
		0, 1, 1, 2, 3, 4, 5, 2, 1, 6, 5, 3, 1, 0, 2, 3, 6, 2, 5, 1, 
		2, 1, 1, 3, 7, 2, 0, 5, 6, 5, 4, 2, 7, 2, 4, 1, 1, 6, 2, 3,
		3, 4, 7, 5, 5, 6, 6, 3, 2, 6, 5, 0, 0, 3, 3, 2, 6, 3, 3, 3,
		1, 7, 4, 3, 7, 7, 5, 2, 1, 6, 0, 6, 2, 7, 3, 3, 6, 5, 0, 1,
		4, 2, 3, 7, 7, 6, 3, 1, 6, 1, 0, 3, 0, 3, 7, 1, 3, 0, 4, 5, 
		2, 7, 5, 1, 0, 7, 0, 3, 5, 7, 3, 6, 4, 2, 4, 4, 6, 1, 5, 6, 
		3, 3, 4, 4, 7, 0, 4, 6, 3, 6, 5, 2, 0, 1, 4, 6, 7, 4, 5, 1, 
		3, 1, 0, 6, 2, 1, 6, 6, 2, 3, 4, 7, 0, 0, 0, 5, 4, 6, 1, 0, 
		1, 3, 0, 0, 5, 7, 0, 7, 6, 7, 7, 2, 4, 4, 2, 0, 5, 1, 2, 5, 
		4, 4, 4, 7, 6, 4, 2, 5, 4, 6, 2, 0, 1, 5, 4, 5, 4, 6, 3, 7, 
		4, 1, 1, 5, 4, 6, 2, 4, 1, 3, 0, 6, 7, 0, 2, 4, 1, 0, 2, 5, 
		5, 2, 6, 5, 1, 1, 7, 7, 6, 7, 3, 5, 0, 2, 4, 2, 0, 7, 7, 5, 
		0, 3, 7, 7, 2, 0, 1, 5, 2, 7, 0, 5, 7, 6, 4, 5
	};

	for (int i = 0; i < 4; i++) {
		//output = output << 8;
		mds_input1 = mds_input1 << 3;
		mds_input2 = mds_input2 << 3;
		table_in1 = (input1 >> ((3 - i) * 8)) & 0x0FF;
		table_in2 = (input2 >> ((3 - i) * 8)) & 0x0FF;
		uint8_t table_out1 = lsb[table_in1];
		uint8_t table_out2 = lsb[table_in2];
		temp = p[table_out1];
		mds_input1 = mds_input1 | temp;


		temp = p[table_out2];
		mds_input2 = mds_input2 | temp;
	}

	//mds_ret = 
	uint16_t mds_ret1 = linearlayer(mds_input1);
	uint16_t mds_ret2 = linearlayer(mds_input2);
	return mds_ret1 ^ mds_ret2;
}


void GetCorrectPermutation_SecondRound(uint32_t goodpairs[][2]) {
	int counter[720] = { 0 };
	for (int i = 0; i < 512; i++) {
		for (int j = 0; j < 720; j++) {
			if ((ThetaPiFA_SecondRound(goodpairs[i][0], goodpairs[i][1], P[j]) & 0x01FF) == 0) {
				counter[j] = counter[j] + 1;
				//the j-th permutation was recommended by the i-th good pair
				//record[j]->next = new ListNode(i);
			}
		}
	}
	int threshold = 40;
	for (int i = 0; i < 720; i++) {
		if (counter[i] > threshold) {
			cout << i << endl;
		}
	}
}

void GetPossibleRightPairs_SecondRound(int k, uint32_t goodpairs[][2]) {
	for (int i = 0; i < 19; i++) {

		if ((ThetaPiFA_SecondRound(goodpairs[i][0], goodpairs[i][1], P[k]) & 0x01FF) == 0) {
			cout << std::hex << "0x" << goodpairs[i][0] << ",0x" << goodpairs[i][1] << "," << endl;
		}
	}
}

void GetRightParis_SecondRound(uint32_t possible_right_pairs[][2], uint8_t Ai[][32]) {

	uint8_t lsb[256] = {
		7, 2, 2, 4, 0, 3, 6, 4, 2, 5, 6, 0, 2, 7, 4, 0, 5, 4, 6, 2, 4, 2, 2, 0, 1, 4, 7, 6, 5, 6, 3, 4, 1, 4, 3, 2, 2, 5, 4, 0, 0, 3, 1, 6, 6, 5, 5, 0, 4, 5, 6, 7, 7, 0, 0, 4, 5, 0, 0, 0, 2, 1, 3, 0, 1, 1, 6, 4, 2, 5, 7, 5, 4, 1, 0, 0, 5, 6, 7, 2, 3, 4, 0, 1, 1, 5, 0, 2, 5, 2, 7, 0, 7, 0, 1, 2, 0, 7, 3, 6, 4, 1, 6, 2, 7, 1, 7, 0, 6, 1, 0, 5, 3, 4, 3, 3, 5, 2, 6, 5, 0, 0, 3, 3, 1, 7, 3, 5, 0, 5, 6, 4, 7, 2, 3, 5, 1, 3, 6, 2, 0, 2, 7, 5, 4, 2, 5, 5, 4, 0, 3, 1, 7, 7, 7, 6, 3, 5, 2, 7, 2, 0, 7, 7, 6, 1, 7, 1, 5, 1, 1, 4, 3, 3, 4, 7, 6, 2, 4, 6, 3, 3, 3, 1, 5, 3, 4, 6, 3, 5, 4, 7, 2, 6, 3, 6, 3, 5, 0, 1, 3, 2, 2, 6, 3, 5, 4, 3, 2, 0, 7, 5, 1, 7, 4, 3, 2, 7, 4, 6, 6, 4, 5, 6, 2, 2, 1, 1, 5, 1, 0, 6, 7, 4, 3, 4, 7, 1, 1, 6, 7, 0, 1, 1, 4, 7, 2, 6, 4, 1, 7, 6, 1, 5, 3, 6
	};


	for (int i = 0; i < 19; i++) {

		uint8_t table_in1 = 0;
		uint8_t table_output1 = 0;
		uint8_t lsb1 = 0;
		uint8_t table_in2 = 0;
		uint8_t table_output2 = 0;
		uint8_t lsb2 = 0;
		table_in1 = possible_right_pairs[i][0] >> 24;
		table_in2 = possible_right_pairs[i][1] >> 24;
		//table_output1 = Tbox1[table_in1];
		//table_output2 = Tbox1[table_in2];
		lsb1 = lsb[table_in1];
		lsb2 = lsb[table_in2];
		uint8_t zeta1 = lsb1 ^ lsb2;


		for (int j = 0; j < 1; j++) {
			uint32_t plaintext1, plaintext2;
			uint32_t ciphertext1, ciphertext2;
			for (int k = 0; k < 32; k++) {

				plaintext1 = Ai[j][k];
				plaintext1 = plaintext1 << 24;
				plaintext1 = plaintext1 ^ (possible_right_pairs[i][0] & 0x00FFFFFF);
				ciphertext1 = yoroi(RecoveredFirstRoundInverse(plaintext1));

				for (int l = 0; l < 32; l++) {
					plaintext2 = Ai[j ^ zeta1][k];
					plaintext2 = plaintext2 << 24;
					plaintext2 = plaintext2 ^ (possible_right_pairs[i][1] & 0x00FFFFFF);
					if (plaintext1 == possible_right_pairs[i][0] && plaintext2 == possible_right_pairs[i][1]) {
						continue;
					}
					ciphertext2 = yoroi(RecoveredFirstRoundInverse(plaintext2));
					if (((ciphertext2 ^ ciphertext1) & 0x00FFFFFF) == 0) {
						cout << std::hex << "0x" << possible_right_pairs[i][0] << ",0x" << possible_right_pairs[i][1] << "," << endl;
						goto NEXTPAIR;
					}

				}
			}

		}

	NEXTPAIR:
		cout << "";

	}
}

void DivideIntoBj_SecondRound(uint32_t right_pairs[][2], uint8_t Ai[][32]) {

	uint8_t zeta[4] = { 0 };
	uint8_t lsb[256] = {
		7, 2, 2, 4, 0, 3, 6, 4, 2, 5, 6, 0, 2, 7, 4, 0, 5, 4, 6, 2, 4, 2, 2, 0, 1, 4, 7, 6, 5, 6, 3, 4, 1, 4, 3, 2, 2, 5, 4, 0, 0, 3, 1, 6, 6, 5, 5, 0, 4, 5, 6, 7, 7, 0, 0, 4, 5, 0, 0, 0, 2, 1, 3, 0, 1, 1, 6, 4, 2, 5, 7, 5, 4, 1, 0, 0, 5, 6, 7, 2, 3, 4, 0, 1, 1, 5, 0, 2, 5, 2, 7, 0, 7, 0, 1, 2, 0, 7, 3, 6, 4, 1, 6, 2, 7, 1, 7, 0, 6, 1, 0, 5, 3, 4, 3, 3, 5, 2, 6, 5, 0, 0, 3, 3, 1, 7, 3, 5, 0, 5, 6, 4, 7, 2, 3, 5, 1, 3, 6, 2, 0, 2, 7, 5, 4, 2, 5, 5, 4, 0, 3, 1, 7, 7, 7, 6, 3, 5, 2, 7, 2, 0, 7, 7, 6, 1, 7, 1, 5, 1, 1, 4, 3, 3, 4, 7, 6, 2, 4, 6, 3, 3, 3, 1, 5, 3, 4, 6, 3, 5, 4, 7, 2, 6, 3, 6, 3, 5, 0, 1, 3, 2, 2, 6, 3, 5, 4, 3, 2, 0, 7, 5, 1, 7, 4, 3, 2, 7, 4, 6, 6, 4, 5, 6, 2, 2, 1, 1, 5, 1, 0, 6, 7, 4, 3, 4, 7, 1, 1, 6, 7, 0, 1, 1, 4, 7, 2, 6, 4, 1, 7, 6, 1, 5, 3, 6
	};

	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
			uint8_t table_in1 = 0;
			uint8_t table_output1 = 0;
			uint8_t lsb1 = 0;
			uint8_t table_in2 = 0;
			uint8_t table_output2 = 0;
			uint8_t lsb2 = 0;
			table_in1 = (right_pairs[i][0] >> (3 - j) * 8) & 0x0FF;
			table_in2 = (right_pairs[i][1] >> (3 - j) * 8) & 0x0FF;
			lsb1 = lsb[table_in1];
			lsb2 = lsb[table_in2];
			zeta[j] = lsb1 ^ lsb2;
		}
		if (zeta[1] == 0) continue;
		uint32_t temp1, temp2, output1, output2;
		for (int j = 0; j < 8; j++) {
			for (int k = 0; k < 8; k++) {
				//for (int l = 0; l < 8; l++) {
				for (int m = 0; m < 4; m++) {
					for (int n = 0; n < 32; n++) {
						temp1 = Ai[j][m];
						temp1 = temp1 << 8;
						temp1 = temp1 ^ Ai[k][n];
						temp1 = temp1 << 16;
						temp1 = temp1 ^ (right_pairs[i][0] & 0x0000FFFF);
						output1 = yoroi(RecoveredFirstRoundInverse(temp1));
						for (int o = 0; o < 4; o++) {
							for (int p = 0; p < 32; p++) {
								temp2 = Ai[j ^ zeta[0]][o];
								temp2 = temp2 << 8;
								temp2 = temp2 ^ Ai[k ^ zeta[1]][p];
								temp2 = temp2 << 16;
								temp2 = temp2 ^ (right_pairs[i][1] & 0x0000FFFF);
								output2 = yoroi(RecoveredFirstRoundInverse(temp2));
								if (((output1 ^ output2) & 0x00FFFFFF) == 0) {
									cout << "{" << int(Ai[k][n]) << "," << int(Ai[k ^ zeta[1]][p]) << "},";
									goto NEXTPAIRS2;
								}
							}
						}

					NEXTPAIRS2:
						cout << "";
					}
				}
				//}
			}
		}



	}




}


uint32_t RecoveredSecondRound(uint32_t input) {
	uint32_t output = 0;

	uint8_t table_in = 0;

	uint16_t mds_input = 0;
	for (int i = 0; i < 4; i++) {
		output = output << 8;
		mds_input = mds_input << 3;
		table_in = (input >> ((3 - i) * 8)) & 0x0FF;
		uint8_t table_out = Tbox2_recovered[table_in];
		output = output | table_out;
		mds_input = mds_input | (table_out & 0x07);
	}

	uint16_t mds_ret = linearlayer(mds_input);

	output = output & 0xf8f8f8f8;
	uint32_t k = 0;
	for (int i = 0; i < 4; i++) {
		k = k << 8;
		k = k | ((mds_ret >> ((3 - i) * 3)) & 0x07);
	}
	output = output | k;
	return output;
}

uint32_t RecoveredSecondRoundInverse(uint32_t input) {
	uint32_t output = 0;

	uint8_t table_in = 0;

	uint16_t mds_input = 0;
	//output = input;
	for (int i = 0; i < 4; i++) {
		//output = output << 8;
		mds_input = mds_input << 3;
		//table_in = (input >> ((3 - i) * 8)) & 0x0FF;
		//uint8_t table_out = sbox2[table_in];
		//output = output | table_out;

		mds_input = mds_input | ((input >> (3 - i) * 8) & 0x07);
	}

	uint16_t mds_ret = linearlayer(mds_input);

	output = input & 0xf8f8f8f8;
	uint32_t k = 0;
	for (int i = 0; i < 4; i++) {
		k = k << 8;
		k = k | ((mds_ret >> ((3 - i) * 3)) & 0x07);
	}
	output = output | k;

	input = output;
	output = 0;

	for (int i = 0; i < 4; i++) {
		output = output << 8;
		table_in = (input >> ((3 - i) * 8)) & 0x0FF;
		uint8_t table_out = Tbox2_recovered_inv[table_in];
		output = output | table_out;
	}

	return output;
}



void DivideIntoAi_ThirdRound() {
	unsigned seed1 = std::chrono::system_clock::now().time_since_epoch().count();
	std::mt19937 g1(seed1);  // mt19937 is a standard mersenne_twister_engine


	for (int p = 0; p < 1; p++) {
		uint32_t r = g1();
		uint32_t structure[256] = { 0 };
		for (int i = 0; i < 256; i++) {
			structure[i] = (i << 24) ^ (r & 0x00FFFFFF);
			structure[i] = RecoveredSecondRoundInverse(structure[i]);
			structure[i] = RecoveredFirstRoundInverse(structure[i]);
			structure[i] = yoroi(structure[i]);
		}

		for (int i = 0; i < 256; i++) {
			for (int j = i + 1; j < 256; j++) {
				if (((structure[i] ^ structure[j]) & 0x00FFFFFF) == 0) {
					cout << "{" << i << "," << j << "},";
				}
			}
		}
	}


}


void GetGoodPairs_ThirdRound() {
	unsigned seed1 = std::chrono::system_clock::now().time_since_epoch().count();
	std::mt19937 g1(seed1);  // mt19937 is a standard mersenne_twister_engine
	uint32_t r = g1();
	uint32_t ciphertext1 = 0;
	uint32_t ciphertext2 = 0;

	for (int i = 0; i < 32; i++) {
		ciphertext1 = g1();
		ciphertext2 = g1();
		ciphertext2 = ciphertext2 & 0xFF000000;
		ciphertext2 = (ciphertext1 & 0x00FFFFFF) ^ ciphertext2;
		if (ciphertext1 == ciphertext2) {
			i--;
			continue;
		}
		//goodpairs[i][0] = yoroi_inverse(ciphertext1);
		//goodpairs[i][1] = yoroi_inverse(ciphertext2);
		cout << std::hex << "0x" << RecoveredSecondRound(RecoveredFirstRound(yoroi_inverse(ciphertext1))) << ",0x" << RecoveredSecondRound(RecoveredFirstRound(yoroi_inverse(ciphertext2))) << "," << endl;
	}


}

uint16_t ThetaPiFA_ThirdRound(uint32_t input1, uint32_t input2, uint8_t p[]) {
	uint8_t table_in1 = 0;
	uint16_t mds_input1 = 0;
	uint8_t table_in2 = 0;
	uint16_t mds_input2 = 0;
	uint8_t temp = 0;

	uint8_t lsb[256] = {
		0, 0, 1, 2, 0, 3, 0, 4, 1, 5, 2, 2, 3, 2, 6, 6, 4, 3, 4, 4, 5, 0, 5, 7, 6, 7, 1, 4, 1, 4, 2, 4, 5, 2, 5, 0, 6, 1, 7, 3, 2, 6, 6, 1, 0, 4, 2, 5, 5, 2, 7, 5, 4, 3, 6, 7, 6, 1, 1, 3, 2, 6, 0, 1, 2, 4, 1, 6, 4, 3, 2, 4, 0, 6, 1, 4, 7, 1, 6, 3, 4, 5, 2, 6, 7, 3, 6, 2, 1, 5, 5, 6, 2, 0, 3, 2, 4, 7, 1, 5, 2, 3, 1, 4, 7, 1, 7, 2, 0, 0, 5, 6, 4, 2, 1, 1, 5, 7, 0, 6, 1, 6, 0, 5, 6, 5, 3, 0, 5, 5, 5, 4, 3, 7, 5, 2, 7, 5, 1, 3, 5, 3, 4, 1, 6, 0, 1, 6, 3, 3, 4, 4, 4, 1, 6, 7, 0, 7, 6, 0, 7, 0, 6, 6, 3, 4, 7, 4, 3, 7, 3, 4, 6, 5, 2, 6, 1, 3, 6, 0, 7, 3, 7, 2, 0, 1, 1, 4, 6, 3, 7, 7, 1, 3, 2, 0, 7, 2, 4, 5, 0, 2, 5, 7, 3, 5, 2, 0, 7, 1, 7, 5, 2, 7, 2, 3, 0, 7, 0, 0, 2, 7, 5, 1, 1, 3, 6, 4, 5, 2, 3, 0, 4, 3, 4, 1, 4, 2, 6, 3, 0, 4, 3, 6, 2, 0, 5, 7, 0, 3, 5, 5, 0, 7, 7, 1
	};

	for (int i = 0; i < 4; i++) {
		//output = output << 8;
		mds_input1 = mds_input1 << 3;
		mds_input2 = mds_input2 << 3;
		table_in1 = (input1 >> ((3 - i) * 8)) & 0x0FF;
		table_in2 = (input2 >> ((3 - i) * 8)) & 0x0FF;
		uint8_t table_out1 = lsb[table_in1];
		uint8_t table_out2 = lsb[table_in2];
		temp = p[table_out1];
		mds_input1 = mds_input1 | temp;


		temp = p[table_out2];
		mds_input2 = mds_input2 | temp;
	}

	//mds_ret = 
	uint16_t mds_ret1 = linearlayer(mds_input1);
	uint16_t mds_ret2 = linearlayer(mds_input2);
	return mds_ret1 ^ mds_ret2;
}

void GetCorrectPermutation_ThirdRound(uint32_t goodpairs[][2]) {
	int counter[720] = { 0 };
	for (int i = 0; i < 32; i++) {
		for (int j = 0; j < 720; j++) {
			if ((ThetaPiFA_ThirdRound(goodpairs[i][0], goodpairs[i][1], P[j]) & 0x01FF) == 0) {
				counter[j] = counter[j] + 1;
				//the j-th permutation was recommended by the i-th good pair
				//record[j]->next = new ListNode(i);
			}
		}
	}
	int threshold = 30;
	for (int i = 0; i < 720; i++) {
		if (counter[i] > threshold) {
			cout << i << endl;
		}
	}
}


void DivideIntoBj_ThirdRound(uint32_t right_pairs[][2], uint8_t Ai[][32]) {

	uint8_t zeta[4] = { 0 };
	uint8_t lsb[256] = {
		5, 5, 2, 3, 5, 0, 5, 4, 2, 6, 3, 3, 0, 3, 7, 7, 4, 0, 4, 4, 6, 5, 6, 1, 7, 1, 2, 4, 2, 4, 3, 4, 6, 3, 6, 5, 7, 2, 1, 0, 3, 7, 7, 2, 5, 4, 3, 6, 6, 3, 1, 6, 4, 0, 7, 1, 7, 2, 2, 0, 3, 7, 5, 2, 3, 4, 2, 7, 4, 0, 3, 4, 5, 7, 2, 4, 1, 2, 7, 0, 4, 6, 3, 7, 1, 0, 7, 3, 2, 6, 6, 7, 3, 5, 0, 3, 4, 1, 2, 6, 3, 0, 2, 4, 1, 2, 1, 3, 5, 5, 6, 7, 4, 3, 2, 2, 6, 1, 5, 7, 2, 7, 5, 6, 7, 6, 0, 5, 6, 6, 6, 4, 0, 1, 6, 3, 1, 6, 2, 0, 6, 0, 4, 2, 7, 5, 2, 7, 0, 0, 4, 4, 4, 2, 7, 1, 5, 1, 7, 5, 1, 5, 7, 7, 0, 4, 1, 4, 0, 1, 0, 4, 7, 6, 3, 7, 2, 0, 7, 5, 1, 0, 1, 3, 5, 2, 2, 4, 7, 0, 1, 1, 2, 0, 3, 5, 1, 3, 4, 6, 5, 3, 6, 1, 0, 6, 3, 5, 1, 2, 1, 6, 3, 1, 3, 0, 5, 1, 5, 5, 3, 1, 6, 2, 2, 0, 7, 4, 6, 3, 0, 5, 4, 0, 4, 2, 4, 3, 7, 0, 5, 4, 0, 7, 3, 5, 6, 1, 5, 0, 6, 6, 5, 1, 1, 2
	};

	for (int i = 0; i < 3; i++) {
		for (int j = 0; j < 4; j++) {
			uint8_t table_in1 = 0;
			uint8_t table_output1 = 0;
			uint8_t lsb1 = 0;
			uint8_t table_in2 = 0;
			uint8_t table_output2 = 0;
			uint8_t lsb2 = 0;
			table_in1 = (right_pairs[i][0] >> (3 - j) * 8) & 0x0FF;
			table_in2 = (right_pairs[i][1] >> (3 - j) * 8) & 0x0FF;
			lsb1 = lsb[table_in1];
			lsb2 = lsb[table_in2];
			zeta[j] = lsb1 ^ lsb2;
		}
		if (zeta[1] == 0) continue;
		uint32_t temp1, temp2, output1, output2;
		for (int j = 0; j < 8; j++) {
			for (int k = 0; k < 8; k++) {
				//for (int l = 0; l < 8; l++) {
				for (int m = 0; m < 1; m++) {
					for (int n = 0; n < 32; n++) {
						temp1 = Ai[j][m];
						temp1 = temp1 << 8;
						temp1 = temp1 ^ Ai[k][n];
						temp1 = temp1 << 16;
						temp1 = temp1 ^ (right_pairs[i][0] & 0x0000FFFF);
						output1 = yoroi(RecoveredFirstRoundInverse(RecoveredSecondRoundInverse(temp1)));
						for (int o = 0; o < 1; o++) {
							for (int p = 0; p < 32; p++) {
								temp2 = Ai[j ^ zeta[0]][o];
								temp2 = temp2 << 8;
								temp2 = temp2 ^ Ai[k ^ zeta[1]][p];
								temp2 = temp2 << 16;
								temp2 = temp2 ^ (right_pairs[i][1] & 0x0000FFFF);
								output2 = yoroi(RecoveredFirstRoundInverse(RecoveredSecondRoundInverse(temp2)));
								if (((output1 ^ output2) & 0x00FFFFFF) == 0) {
									cout << "{" << int(Ai[k][n]) << "," << int(Ai[k ^ zeta[1]][p]) << "},";
									goto NEXTPAIRS2;
								}
							}
						}

					NEXTPAIRS2:
						cout << "";
					}
				}
				//}
			}
		}

	}

}


uint32_t RecoveredThirdRound(uint32_t input) {
	uint32_t output = 0;

	uint8_t table_in = 0;

	uint16_t mds_input = 0;
	for (int i = 0; i < 4; i++) {
		output = output << 8;
		mds_input = mds_input << 3;
		table_in = (input >> ((3 - i) * 8)) & 0x0FF;
		uint8_t table_out = Tbox3_recovered[table_in];
		output = output | table_out;
		mds_input = mds_input | (table_out & 0x07);
	}

	uint16_t mds_ret = linearlayer(mds_input);

	output = output & 0xf8f8f8f8;
	uint32_t k = 0;
	for (int i = 0; i < 4; i++) {
		k = k << 8;
		k = k | ((mds_ret >> ((3 - i) * 3)) & 0x07);
	}
	output = output | k;
	return output;
}

uint32_t RecoveredThirdRoundInverse(uint32_t input) {
	uint32_t output = 0;

	uint8_t table_in = 0;

	uint16_t mds_input = 0;
	//output = input;
	for (int i = 0; i < 4; i++) {
		//output = output << 8;
		mds_input = mds_input << 3;
		//table_in = (input >> ((3 - i) * 8)) & 0x0FF;
		//uint8_t table_out = sbox2[table_in];
		//output = output | table_out;

		mds_input = mds_input | ((input >> (3 - i) * 8) & 0x07);
	}

	uint16_t mds_ret = linearlayer(mds_input);

	output = input & 0xf8f8f8f8;
	uint32_t k = 0;
	for (int i = 0; i < 4; i++) {
		k = k << 8;
		k = k | ((mds_ret >> ((3 - i) * 3)) & 0x07);
	}
	output = output | k;

	input = output;
	output = 0;

	for (int i = 0; i < 4; i++) {
		output = output << 8;
		table_in = (input >> ((3 - i) * 8)) & 0x0FF;
		uint8_t table_out = Tbox3_recovered_inv[table_in];
		output = output | table_out;
	}

	return output;
}

uint32_t RecoveredLastRound(uint32_t input) {
	uint32_t output = 0;

	uint8_t table_in = 0;
	for (int i = 0; i < 4; i++) {
		output = output << 8;
		table_in = (input >> ((3 - i) * 8)) & 0x0FF;
		uint8_t table_out = Tbox4_recovered[table_in];
		output = output | table_out;

	}
	return output;
}
uint32_t RecoveredLastRoundInverse(uint32_t input) {
	uint32_t output = 0;

	uint8_t table_in = 0;
	for (int i = 0; i < 4; i++) {
		output = output << 8;
		table_in = (input >> ((3 - i) * 8)) & 0x0FF;
		uint8_t table_out = Tbox4_recovered_inv[table_in];
		output = output | table_out;

	}
	return output;
}


uint32_t Recoveredyoroi(uint32_t input) {
	input = RecoveredFirstRound(input);
	input = RecoveredSecondRound(input);
	input = RecoveredThirdRound(input);
	input = RecoveredLastRound(input);
	return input;

}

uint32_t goodpairs_firstround[1024][2] = {
0xfffcf092,0xae0dae0a,
0xdaf118d6,0xa6d6fe7b,
0xa4a1e568,0x5ecca898,
0xd6dbf45d,0x1c1724d3,
0x7d088ce7,0x1301c591,
0x2e0ee67,0x4fc535b0,
0x2b756beb,0x279df99,
0x113d62de,0x1a0279b4,
0xcf8c00a4,0xa2716f96,
0xab0533c3,0x2c809371,
0xc416a20c,0xfcc4a154,
0xea3e6fce,0x88a23a29,
0x3cbe1603,0x2988fecd,
0xefa1cb1b,0xc3d78610,
0x84c19cbe,0x866c5fe1,
0x1b9eac76,0x175ecec2,
0xbf3f9af3,0xf626c39b,
0x4d6ef57a,0x2d223f8a,
0xabe69054,0x4a228696,
0x88dd768f,0x64c35f76,
0xf634d60d,0x90ab852,
0xaafa509,0xee0c6e5a,
0xab99c009,0xb39f5703,
0x6edfe4bd,0xf130e3d2,
0x9d764df2,0x3f744e4f,
0x1172a071,0xfb0016c,
0x6afaa5e0,0x148bcf80,
0x177883a1,0x51923ff0,
0xf429198c,0xd977335f,
0xce2556ed,0xfb677bb6,
0x4bdc8e04,0xd21002f1,
0xba82913c,0x220ff091,
0xa6890fde,0x44cbdf8b,
0xb0ceaf07,0x3a1c39a1,
0x4cfd0e1e,0x18b5e278,
0x469dc888,0x1db672d1,
0xfde03b7b,0x27d50a46,
0x68fb65f6,0x54eb351a,
0x51b22141,0xdcd001d2,
0xca6f9f3c,0xb2a27788,
0x6f864eb8,0x44c1bf96,
0x1dd4cda2,0x793fb5a,
0xfc4d4b9f,0x7f0f253,
0x499408ed,0xed3cb3e9,
0x2fdf61a8,0x282dc2c2,
0xaff6e0d7,0xdf335519,
0xed3f1fda,0xce2a8faf,
0x673eb6df,0x9b8abf39,
0x4543c1a8,0x60f19be1,
0xc8092b69,0x14647923,
0x6c09949e,0x5672528e,
0xac312b97,0xad8fb6de,
0xb89586fd,0x967d87d5,
0xb928e5db,0x35b4e1d9,
0x5b8a3103,0x333971a7,
0x8a2b2934,0x3836b2de,
0x4046fcec,0x281bbc7d,
0xbd8986d,0xbdfbcddd,
0x9700aeff,0x80201acb,
0x3793fcbc,0x7e1be22c,
0x788323a6,0x84ee5b24,
0x11520f60,0x7705746c,
0xe11dbc98,0x918b411a,
0x1e6996e8,0xd875b6b6,
0xaa92b289,0x1622c800,
0xcd0c4c1d,0xeab807ce,
0xc24a8a0c,0xe4fd31e8,
0x178af653,0xb7c2abb2,
0x2d08ca92,0xd18f9b23,
0xd69aaf00,0x1913290b,
0xf7834796,0xca3418c0,
0x686ccc9b,0x710a9142,
0x3d019ce3,0xc3c57c17,
0xdc91e4d2,0xe0577cb1,
0xfd2b3dc0,0x965023e4,
0xc34e6553,0x4e17295,
0x2c83973c,0x6ee0bfb4,
0xabfeaf22,0xa314f7e2,
0xa2ddf889,0x4755e641,
0xed3c93d8,0x43a2523c,
0xe44fc54d,0x592c0f7,
0xae3a88c1,0xf4b0b720,
0x15d00aa1,0x7aeebd87,
0x58d7f678,0x4a369cfc,
0xfcbe3df,0x8fd45f96,
0xe3e01731,0xb5cf573b,
0x8281f96a,0x2190d68a,
0x4a24baad,0x619dd790,
0xf158ba4,0x6c724ca1,
0x7c8c4bba,0x8eaf4c7c,
0xa75bb990,0x60654adb,
0x403c7704,0xad9e760d,
0xa5947fb,0xf13a0447,
0xd6edbcd0,0x63c258ce,
0xeb29a00b,0x9948d7fe,
0xbfc7b9b2,0x6f1ab756,
0x1337832f,0xc98b9497,
0xd946cbb8,0x1b682a66,
0x76de091,0xd372b0f5,
0x8cf7b568,0xfd68ccaa,
0x42b1dda6,0xb8078143,
0xe5bf9815,0xb764cb7e,
0x6100c468,0xccb93440,
0xddba855d,0x30bb5d2e,
0x921e5923,0x26de5d60,
0x73e7c621,0x60569165,
0x621cd66d,0xc2572f,
0x9d7ddf52,0x55c21da3,
0xb1388a50,0xe7229a5c,
0x9e7b4f29,0x8e08176a,
0xd5e3d13c,0x835bdec6,
0xc892b5d1,0x27ab47e4,
0x59fc3697,0x6bd2d047,
0x1664d39d,0x887abf8a,
0x97607fa7,0xffd5aaa3,
0x6931a930,0x54db509,
0x7a4232ab,0xb79f8359,
0x5e59b67,0x108ab676,
0xf70af24c,0xcdbd8b22,
0xf309f241,0x21cb61bb,
0x7d454acf,0xedf430a1,
0xbeb3aee8,0xb9ce3f33,
0x7b7232ef,0xa626fe78,
0x5e7262c9,0x2e4c38e4,
0xd61a0b39,0xb7d45b3c,
0x8f42e128,0x65815b36,
0xedd6def1,0xa5262a8b,
0x2d5dc139,0x9b983d64,
0x70a83630,0xa59ab33c,
0x3cc26db7,0x14d2ba62,
0xd2e17d95,0xe68c72c6,
0x7a0cf349,0x54d5d061,
0x96562f93,0x46b7cc2f,
0xb2f8ad4f,0x9ca398cd,
0xfa947621,0xc7795e4c,
0xc9ee23bc,0x31ee23bc,
0xf51c6d5b,0xc4fcafc5,
0x3447e4d5,0x7a33c559,
0x4b0bd380,0x3ddcdc8e,
0x6329b73f,0xa1d14f94,
0x42b39e6b,0xe42b0e81,
0xa20ad423,0xf99e00d7,
0x253a4ec4,0x578cc625,
0x91109e2a,0x59696b0f,
0xe951d513,0x2f995fd2,
0x6622128a,0xa77ff94c,
0x30c17f1,0x3e840621,
0x5cbfd536,0x981dad87,
0xab304f2,0xc85279a3,
0x9f1e94fc,0xbb4adb21,
0x6e38ce97,0xc9215506,
0x7df05de4,0x3b33e851,
0xca84cc03,0x224f1b84,
0x907556d1,0xd808c4f7,
0x1835c3c,0x32398f21,
0x6d013010,0xd53369a3,
0x4e67f984,0x51d28506,
0xe9ce9e98,0x108b277e,
0xbf1131e7,0x743f87c9,
0xcbd62825,0x129f056a,
0x85b7f48b,0x2fd98c99,
0xf7c724a,0x30456b53,
0x1b2a98f0,0xbcb48025,
0x1fa881c9,0xee0afdfc,
0x47913dc7,0xa6162e08,
0xb5d34886,0x151f6e6b,
0xeabad6c7,0xc089c7f1,
0xb1d01320,0x122c8061,
0xbf51e0e9,0xeed20121,
0x4e6e73d0,0x858255c3,
0xe82f1bf8,0x88b8ddd4,
0xcb16a6a0,0x121d4851,
0x1df2b9f5,0x3418638f,
0x26ded117,0xf07976cf,
0x7802440f,0x36b045f4,
0xe9c461d9,0x3c01d58f,
0x322a30a,0xbae54c46,
0xba351b09,0xcc4f9ec8,
0x3c5c9632,0xf2dca623,
0x684ddd95,0xf42eb8e8,
0xea58d2b4,0xd906383c,
0x8569efe9,0xc4c6a745,
0xd773f9ed,0x6f118c09,
0xdc72371,0x581ffbd,
0xf2df2dc8,0x6c5b3389,
0x493cbc01,0xed051acd,
0x8c697125,0xe252388b,
0x82c8d5e2,0x107dee1,
0x29429a7c,0xdbfa9fa8,
0xe2b8d28d,0x3891dab5,
0x11f5ae44,0x7c575cd9,
0x9d28cd2e,0x4b85eef1,
0x21ce849a,0x30726fee,
0x35755cc2,0x3ad9dec4,
0x7ff4e198,0x30535dda,
0x8a4d95a1,0xe75ef0fd,
0x8c3b054f,0xc46dfae6,
0xc98a38be,0x715d2950,
0x5e9c3424,0x335760d7,
0x1af2feba,0x246781a0,
0xd07a729a,0x22df887,
0xc4f576d,0x8897b492,
0x902fbac1,0xfd98e66c,
0xfb830d1e,0xcad36d70,
0xe1c48e6,0x1069ad58,
0x902237fa,0x751e59fe,
0x812ca121,0xebb517d6,
0x5079abf,0x56ed5aca,
0xb2ab4241,0xeb727adf,
0x626001cb,0xfd6853b9,
0x5b4e0e64,0x320849c5,
0xb886372b,0x2ac785fd,
0xbf475043,0xed654199,
0xdd17253e,0xced34788,
0x64c10fbd,0xaa9e057a,
0x71ca83c0,0x842bba3e,
0x981c46fe,0x76d98118,
0xee8cca5a,0x898fa65c,
0x68984a11,0xa1a9309,
0xda327948,0xea222a50,
0x9235de1e,0xa784ac55,
0xb4c60b42,0x8c235085,
0xa867a3e6,0xe7af5324,
0xa5f58058,0x22072fd9,
0x4be9f4e1,0x7dcec089,
0x2a1fdc21,0x8335d56c,
0x28f1addc,0x2c3dfdaf,
0x265f174e,0x25adea9e,
0xe39cefd8,0x79adb0ff,
0x545f4764,0x16265b22,
0xdc7a4321,0x2f511f73,
0x59fba7d0,0x12e7150f,
0xaf126e4,0x7f5d4d9,
0xe6bc51e5,0x669e8b2d,
0x87c97b7b,0xfed8c4ff,
0xe465eff8,0xfe7cc240,
0x345dde5,0xdba77c43,
0xbf41cda,0x533b973,
0x17647391,0x72f7cef7,
0x15b13eef,0xae873480,
0x120ecdc7,0x27930504,
0x10449dde,0x7adefd1e,
0x6416a909,0xad8d0078,
0xb47b6117,0x156235b8,
0x32ea7375,0x9333b62,
0x65de8e31,0x3289f9a7,
0xea727b2f,0x447199f5,
0xcd8d371c,0xa96dd8ec,
0xcbea57bd,0xa7b42806,
0x13e4ad2b,0x18465f90,
0xcc178c55,0x649efd0c,
0x34617c0f,0x8cb921f8,
0x85c81143,0x5511600f,
0xd2262ed6,0x61840815,
0x3eaa83af,0x44d98cb1,
0xa022f109,0xa975fc32,
0xf231b19a,0x6b44e0e8,
0xd4f8e313,0xe42e6759,
0xb82a6887,0x1b84577d,
0xe5e9e951,0x3192c189,
0xbe22fac6,0x33b26967,
0x878d588f,0x8b3f759c,
0x59cc0f48,0xfe7e6df5,
0xa1ff7762,0x797fb76f,
0xc190c278,0xe76c4a73,
0x44bb2bfa,0x53cc1faf,
0xc191c7e4,0x8662d43,
0x1d1c2423,0x5a2d9c9e,
0x7e164102,0xd9b5d29a,
0xc1d4c32e,0xd3e7e721,
0x380cadc1,0x9906f0b7,
0x53c1f4ba,0x526f0f9a,
0x157919d0,0x51cb7a5e,
0xc72525dc,0x10fa5c4f,
0x4611f9f0,0xfb9b3ab1,
0x65a0aabe,0x1283d771,
0x4a57c1bd,0x445003f1,
0x74ea9589,0x3164520c,
0xbb8a4d29,0xda2c6f7b,
0xe211e82,0x2be34977,
0x98d281cd,0xe9b4c20d,
0xdf3bb534,0xc1279f93,
0xc9b20021,0x1b6ece4c,
0x2d9a51e,0x6588d301,
0x3e9fd6c7,0xe085c8f5,
0xaa455066,0x59c8fe1c,
0x9af79411,0x5324af79,
0x1a7b34a6,0x520e51fa,
0xaa3e9558,0xc777277b,
0xcd4a95c2,0xe7083643,
0x95d471dc,0x5028ea30,
0x82b386c3,0x74026cc5,
0x9796c854,0x3c1d99e5,
0x6842de33,0x921c857e,
0x3cbb63f,0xb733fe9e,
0xc0ade18f,0x7bd40e2f,
0xd76aada2,0x26c385e,
0x4d9e864e,0xb856cdec,
0xeb118d09,0xab246520,
0x2c13c361,0xb8d37733,
0x9b723247,0x6763ebac,
0x7c805398,0xedb9bb5,
0x698fb3da,0x83342e11,
0xd7b51a67,0x4991abd9,
0x527a4bd6,0x860b828e,
0xe6d1dc14,0x2dbd1c94,
0xa773479a,0xd7ef3828,
0x9124307b,0x6a0abe28,
0x655e34ed,0x7ca3d82a,
0xcd747ac5,0xd192a4f3,
0x12b94005,0x2a9b5a1c,
0x807ffb7f,0xb7bd4254,
0xa3488cdb,0xc8e09922,
0x3d6d97c0,0x315b21aa,
0xdf8bf154,0x686fc2f2,
0xc8b45d09,0x77d70060,
0xf2036cd4,0x5c1c2868,
0x3e508f2a,0xe9202748,
0x726be7f7,0xf6e16713,
0xac4365fd,0xb68eef1e,
0xd55690d6,0xa86b3a93,
0x2a051697,0xb1e90984,
0xc12b0bd6,0x5da99093,
0x193c8b7d,0x1222700b,
0xe06b9078,0x187f60bc,
0xb45a80e6,0x89d4a9d,
0xf314e929,0x7e047432,
0xec6680fa,0x669ca033,
0x1a4734dd,0x25abc8d8,
0x90cf2bc5,0xa9d1c7f9,
0xf5d8e10f,0x51ce8090,
0x7ab351b,0x2604182f,
0xa921ffc4,0x15ba9c4d,
0xd2c7d796,0xa6941c4d,
0x4f2fc974,0x9d0d4a4b,
0xa743a8e0,0xe4b34662,
0xee2ce0d4,0x80fcc6e,
0x932e8417,0xacc0c51f,
0xf1edc61,0x53239c6a,
0xdd7c10f,0xe0de6baa,
0x209d1428,0x887be39c,
0x970b6407,0x663c9133,
0xd2a0ec30,0x3624207a,
0x9d75043a,0x68a979eb,
0xde923bea,0x9d8e0a98,
0x7745ff17,0x5837f43c,
0xbc6fd0ed,0x88e1a6c6,
0x73aa3b26,0x29bf04e2,
0x48df8195,0x3d2a74e5,
0xd70d3a15,0x8580d085,
0x5a48ab4f,0x5a9dc752,
0x284707a8,0x8018dc04,
0xf6b6d578,0x9f41fe54,
0x504bf7a8,0x6bd539e2,
0x8440196c,0xb5a42d38,
0x1b387f31,0x4686d725,
0x4c0aefe9,0x1480dfcd,
0xc2de01e5,0x30bd0aee,
0x7b96ec52,0x2de69169,
0x8695414,0x126cd204,
0xd000ca30,0x4083a96,
0x93279dde,0x1d3f5a9e,
0x494a6458,0xb025565a,
0x9a57c89d,0x839e8cac,
0x311d17f4,0xd43568a5,
0x907dbbb5,0x3e49cce1,
0xd23d666,0x8a7a0b09,
0x6ead0986,0xbf8fbef7,
0x6bfc415b,0x5c008199,
0x43dbdc2c,0x41f9f63f,
0xdc41fef5,0x6cbd456f,
0x1e177fa3,0xcb61dfa3,
0xad0053fb,0xd2ce0ddf,
0x2eedfe5b,0x479325b8,
0x51c723b1,0x6d16df5e,
0xfc457a25,0x7bca03db,
0xaaf7f8f5,0xcbe8088c,
0xa1045ed5,0xaf76e6f3,
0xdf047390,0x32ea3b7b,
0x3ae560f0,0xa8b01cb,
0xb77854fc,0x9c4416cc,
0xc6564297,0x7f5dea66,
0x6040a957,0x7eb74ce3,
0x984424e7,0x7c493bc2,
0x54d1cce,0x681c82a0,
0x272c6dce,0x10840c5d,
0x5bf8caf0,0xbdbaa172,
0x58a632bb,0x7a12c79b,
0xa39e6024,0x5bc2836b,
0xb6dd9e72,0x571d0ff5,
0x1483a2b9,0xdbf7ab31,
0x1c30ccf1,0x42975f9c,
0xbd6bffdb,0x35223f20,
0x24c6a09d,0x3e22017d,
0x1f110ae7,0x9d299475,
0xfc356bde,0x6f04c8c3,
0xdf5f3391,0x93b4197f,
0x1f83335f,0x63fe7b9a,
0xef4066e6,0x48931839,
0xf3d33eb8,0xd1d05a2f,
0xf090c1a5,0xe5336931,
0xb25998d8,0xc83a0b8a,
0x3f99708,0xd65f9ad2,
0xd26027a6,0xa2a10390,
0x25d8e9c3,0x6357f671,
0x169bcd7b,0xf2725869,
0x4d511699,0x423ca9c4,
0x3d44e826,0xb7d4f2ee,
0x28005604,0xb7d877b8,
0x7d59df02,0x92b22ddf,
0x10293cb2,0xc0478618,
0xcba638b0,0xa248a834,
0x5304b1b2,0xeee37d56,
0x635f5192,0xa05f70de,
0x6a7de792,0xb46a68f4,
0xee01f164,0xdc290786,
0x7e590f25,0xf2f16c09,
0x1d783648,0x36a5ae5c,
0xbd793778,0xeb5d146c,
0x50ee3cc4,0x5de11f7,
0xc474e097,0x9d84f4db,
0xc465aa62,0xe94c2020,
0xd28a8697,0xf002a356,
0x59f80c6b,0xf088a903,
0x9491b43b,0xe114eb3b,
0xf6326318,0xf6515b09,
0x5713d394,0xf842a50c,
0x74d0cd28,0x68b03ee3,
0x92d4393a,0x65c16a58,
0x9672553,0xe037c6ad,
0x9cf4c28d,0xca0a1b50,
0xdbc74162,0xd524e031,
0xf9e4af79,0x6509234d,
0x738229b4,0xc819e4ab,
0xe3058443,0x3ce13c66,
0x4c27420e,0x956cf065,
0x53fddebb,0xb85af8dd,
0x43e2b0c4,0xd7d5eeba,
0xb2dff69f,0x57724bfe,
0xccf877d4,0xc7743efa,
0x3900e437,0x8eda4ac7,
0xf18cb584,0xdfc9ac7b,
0x7a86cb6b,0xdf0d097f,
0x9ef3160e,0xafac750a,
0x616a6310,0x6692fd51,
0xe9799acf,0x9caf49b4,
0x35662ed4,0xe8926f63,
0x91946302,0xf6cb79a6,
0x9dde5118,0x3219405,
0x4e67df91,0x2acd90e1,
0x69c9db81,0x3f6e19c4,
0x7e7b41e1,0xbb6e9719,
0xe41f345a,0xd0b665a1,
0xc0a5eaa5,0x1f7e0c28,
0x39f0a4f7,0x927e604e,
0xa7480ff1,0x72712edd,
0x956185f6,0xf32ee995,
0xe679183,0x16fec9c6,
0x24078f29,0xe73b7ebb,
0x988486ba,0xe92d4866,
0x9e12e101,0x6bcadb1c,
0x501ff84,0x43c70c32,
0xf93676f8,0x921d9f7,
0x4b2a360d,0xda55443a,
0xa2e936f,0x30d82e49,
0x6d6a0bb5,0x8a605ac,
0x670d4cee,0xa034320f,
0x4b62d067,0x798ba454,
0x8c425a21,0x26227c2a,
0x5b8a1d1d,0x86947772,
0x394385d6,0x174ed661,
0x48e699f7,0x840fb08b,
0x569850f4,0x6544c591,
0xc7f00095,0x974c8e75,
0xa8aaa3b5,0x77b5ad02,
0x1c2957b8,0x61d15c74,
0x1dadbfa5,0xc75b66e2,
0x6767d4e2,0x1c953674,
0xf6ea3241,0xe0cca827,
0x29bfe5cb,0x1f5f430f,
0x803c055,0x508adf45,
0x8fba3f88,0xf507fdd3,
0x5d8a09b4,0x78ffa9c8,
0xa1e503e8,0xe82dda59,
0xd7f18695,0x247adfeb,
0xca821a58,0xc2070526,
0xe1bcf2ee,0x20d24e45,
0xb15c7abb,0x19fd5b12,
0x20fd13,0xf95832f6,
0x760365ec,0x854ddf0,
0x28dfd84b,0xe03484f1,
0xe9a4e995,0x41b52330,
0x9e5cb14c,0x790fdebe,
0x2f547054,0x9ac77b7,
0xc9b1035d,0x7e84457c,
0xacaa16d4,0x2c1eae9,
0x43cddaae,0xb7cac270,
0xf054da58,0xb25e6a1e,
0xbbe2707f,0x73553275,
0x2c5f3b13,0x2fb5df95,
0xafd5b644,0x105ae9a7,
0x8898f1ce,0x44644d3e,
0xbd64ce3e,0xdd0ca41,
0x2edb0cae,0x8b0a0779,
0x588f17d7,0xa026fe06,
0x6e62b010,0xad1f8085,
0x455343fb,0xa56772f1,
0x9b9a47a5,0xc1349863,
0x2cca46c5,0x724363fc,
0xe28de2a0,0x6c7fb931,
0xde74295a,0xf98f3b59,
0x38bbe5e5,0xe9d935b3,
0x29d9eb5,0x1a371c2f,
0x8aa53511,0x6cf38365,
0xafd5d53a,0xfa74b42d,
0xd20f7ef3,0x2f1073af,
0x18cfd347,0x3797d645,
0x254445b,0x9707cbbd,
0x4a49823b,0x51771319,
0x44c9bcbb,0xb7c6193a,
0xf78d4773,0xa75c1240,
0x8c60e246,0xc57e550a,
0xf96ddf22,0x70abb1,
0x358f7b7f,0x20b7bff1,
0x985ad094,0x22ee68c4,
0x78a067f5,0xa88f2566,
0x83f61a48,0x86c386d0,
0x7359fa5f,0xfd204220,
0x3566abc7,0x18ca1af8,
0x9f2a73a5,0x6a790abf,
0x6187b20b,0x26b24f63,
0x8c18d306,0x6e86ea21,
0x75d0fcb5,0xb7627d9d,
0xe6eb8b66,0x29e1a627,
0xe9afd5e7,0x3db29e58,
0x188196c2,0xa9838cf7,
0xf77062de,0x5b1d3b48,
0x8683dead,0x3505e012,
0x9d518089,0xdf31bcf4,
0xd3ec331,0xc9134895,
0x1f7f9b6f,0xd31a1fcb,
0x4bfa168e,0xca176dd1,
0x33dc5aa,0x7e2e5ee2,
0xcb7f6846,0x28657b50,
0x4fc43e04,0x72d470a9,
0xe3724292,0x98ca77e4,
0x19f2d524,0x42b06d10,
0x7d13d100,0xaf485b57,
0xf5e0c9cf,0xb8676303,
0x16f3541a,0x9ae1d8a5,
0xfda81e66,0xd8efbafb,
0xf17a60a,0xa744f072,
0xfc4067d,0xd9c6a7c9,
0xb9c46879,0x2187b8d2,
0xbd1e80ea,0x64276e5,
0xec592a74,0xf2df61f5,
0x54a72893,0xb89f65f5,
0xa411eef9,0x5dcc158b,
0x457637a7,0xe5c757a8,
0x912aa4ed,0xc779309b,
0xd6c48183,0xbcab771e,
0x8ce8fa92,0x3b050ebd,
0x22b63439,0xf45779e3,
0x555823da,0x6c77b405,
0x6769ac3a,0xe872a4f1,
0xdef21e1d,0x6958f812,
0x215aee66,0x878b4405,
0x209c6a57,0xbf5b6eeb,
0x67a1c049,0x1af903d,
0x159b923,0x74b37acf,
0x5dc40ffb,0x932ba93b,
0xd4f4a1db,0x488ff989,
0xef7f51db,0xfbaa30ad,
0xfcba654e,0x8f19a1c1,
0x7fa5b0b5,0x61b79b7a,
0xad1cc187,0xc4fb678c,
0x478592be,0x2153ef06,
0x8beba581,0xca48e82e,
0x687d82b6,0x92b47f12,
0x45d2bc4f,0xc9eec8fd,
0x44b291a2,0x450f88aa,
0xf25f61db,0xb84ba17,
0xe66ae874,0xc2df9117,
0xe1a6bef0,0xd4f610a8,
0xb5dba0e6,0x15fb347d,
0x700a1cc3,0x6817f0d2,
0x6516ca0c,0x3ec7ac66,
0x850c542,0xda8a4079,
0xfd72969e,0xf9bfdeb1,
0xf7cc33fd,0x6d4df95a,
0xb4fe3e54,0x1734c157,
0x561e7726,0x7e2bb3d7,
0x651f0228,0x6e5f1e57,
0x1057c41c,0x65a2567b,
0xd3d37077,0xb318b9cb,
0x2ac48dc8,0xf509f1cf,
0xef937e57,0x6abea1d4,
0x71206fc,0x56d97b0b,
0x131f5f09,0x8d23f37d,
0x64758761,0xb6efcfd3,
0x1baab5ea,0x7648eb53,
0xdd2821cb,0x592c3bd9,
0x3bde89ab,0xc77602a,
0x61457152,0xe3c865a0,
0x30e62a07,0xe5c41cf,
0x8afb3ad8,0x33dc17e8,
0x8a0cdbfa,0xf1bfd6bc,
0x42d3a3e,0x2ebb37ac,
0x2c2b59e0,0x556da630,
0xde60e578,0x8c418e84,
0x1efa0480,0x84c5f676,
0x563014f7,0x72fd2110,
0x410040f,0xf45b64f7,
0xd485a820,0xf6277774,
0x428fe6e5,0xdf6e0173,
0x8326013e,0xe24bf3d4,
0x619e7cd,0x7e666f3f,
0x6c57bdfd,0xf346f127,
0xce434df2,0x1420beca,
0xaac01b01,0x44c6508e,
0x8d12a0e8,0x8c943bd5,
0x7d5bc444,0x298eb37b,
0x7651324,0xa3f62804,
0xa704eb39,0xa199499f,
0xce5c8403,0x95bdeedb,
0x8eb5e9ed,0xb097e3d8,
0x9c2290f5,0x15fa0807,
0x34e1a7ea,0x28851995,
0x13d35343,0xd48813be,
0x9924f6c8,0x105824e6,
0x62dd9403,0x6b6e03b5,
0xb19380d4,0xf96818b4,
0x2041b28b,0x7ea43694,
0x31e8b315,0xa14df307,
0xb4ad32b1,0xaa00da77,
0xa525799c,0xb03d2dc3,
0xd36a1060,0x2097530f,
0xb8959a98,0xfd1691bb,
0x59be4eaa,0x4e6e47d4,
0x1467a802,0xe5bfe317,
0x55a15491,0xbf35fe52,
0x828cb0c8,0x5e19e6a1,
0xc4a8abc9,0xa7920562,
0xd17227ca,0x126fd599,
0x2949c50c,0x7caa6273,
0xa251c50c,0xba2a57ff,
0x39f62653,0xa1e08a5a,
0x11939399,0x9c51fe44,
0x75d5637c,0x7412d8ac,
0x2f295560,0x3ce33c5c,
0x5709b0bd,0xa4fc9f3c,
0x78fc9d55,0x75577d08,
0x7f99627f,0x58a1bbf0,
0x4fbfe61e,0xc6da312e,
0xd9c1c423,0xe9acd42,
0x24a5e7d1,0x89c2ec8,
0x6e15edae,0x55b1f3ad,
0x598b84aa,0x32b908b,
0x966d3437,0x1dacc2fe,
0x205dcb86,0xefa8da29,
0xfb2bdd3f,0x3c3146e3,
0x497f3a4a,0xbbad0513,
0x66b4ae5b,0x4eae135b,
0x15e946a5,0x1f55f7bd,
0x5619806c,0xc45cc99,
0x9956f9b8,0x3ad535ff,
0x5333a3c,0x41c759a4,
0xf4796a8d,0xc3db074,
0xd54c96ed,0x33497784,
0x9ed9fbd5,0xa99fede3,
0xf026bf7e,0xf6cd2034,
0x780ee833,0x4aa4533e,
0x51cea659,0xcd06e750,
0x77e459aa,0xb442abde,
0xacb207d7,0xde54204a,
0x40cec2cd,0xaf17cff0,
0x7cc15ab0,0x8cc3ca2e,
0x6bd542fa,0x85199bb3,
0xeaa7d74d,0xc7d66fcf,
0xc44fb4b6,0x84a9117f,
0x9ff7a6ba,0xd514b296,
0x828fb426,0x2a1149ed,
0xd6f459ce,0x723f914b,
0xf69036c9,0xaef367c9,
0x4c88cac3,0x209b253f,
0x765c8203,0xddbccff7,
0xb43d0a92,0x4d8284f4,
0x3ba5706e,0x740d1a19,
0x9516e36d,0xc3d4018c,
0x38718659,0x849a8270,
0x8f954a26,0x6ab90165,
0x4c0f80f1,0x60d21722,
0x59c132db,0xa4db0905,
0xd06c63ae,0xc44f3005,
0x12f8edd3,0xc1704900,
0xb40dde80,0xfdbeddfb,
0xd646ae4e,0x59c6fde2,
0x8ef006d7,0xfdb4ea95,
0x78585134,0x5910511a,
0x37a8dbc4,0x5aaee972,
0xe9903a50,0xb1f38f67,
0xea4b6cec,0x22ba3e5d,
0x6644b4c7,0x23557bcc,
0x6a072f1d,0xcf9a00a7,
0xca57189c,0x7cd63cb7,
0xdce1c388,0x9026451f,
0x343c51dc,0xc72c88cf,
0xc5c48eb8,0xcc17ac3c,
0xb03d59c0,0x460826f8,
0x93b2ff69,0x928d848c,
0x95ccd58d,0xbce81420,
0xa43012d2,0x1cb95136,
0x69f46e21,0x347c04dd,
0x7cb35135,0xe0be7225,
0x7b720fd7,0x24f95eee,
0x9c4f8da6,0x1fed63c0,
0x355f0c77,0xc867785e,
0xa13f89bb,0xfdfb6668,
0x448f74d1,0xd2fe1330,
0x5bef95be,0x5eb26813,
0x8f5238e0,0xff32709c,
0x215e9bb7,0x270ab2f7,
0x7535b323,0xae64a37e,
0x92365929,0x6d3536e7,
0x2c089625,0x52224fda,
0xcd12e24d,0x58969ced,
0x4f316d34,0x4fb39712,
0xc1fb7f38,0xc09fed38,
0xed89248b,0x265bf5e0,
0x6d8df7ab,0x8725bc7a,
0xcb3bcd98,0x96e78ff0,
0x4d03e491,0x146b0c09,
0xe4af1d1,0xec5afa08,
0x6be58b17,0x150e0e78,
0x7fcae9e7,0x24ad3cdd,
0x79fbc56a,0xce9ebd38,
0x54f226e8,0xb795bcc0,
0xf76aac4,0x8cbd29bb,
0x5bcfd95c,0xea2d00fa,
0x8fa6d393,0x5bb4dcf0,
0xdb359a9f,0xabdf1b20,
0xa922bdf,0x4d7a9385,
0xabb66b7c,0x73c8396c,
0xeaa468ff,0x521b95ec,
0x9f1cab49,0x533eea62,
0x29ff2d03,0x91438cf7,
0x87d49c06,0xefb0bfcd,
0x7ffce2df,0x6c1b6582,
0xc7d1d637,0x32804e77,
0x73f4453d,0xcea5cf0,
0x146bd18e,0x89510104,
0xe85f52fc,0x9339f030,
0xda25cc4a,0xfce439f0,
0x1f4009e4,0x4f2539ba,
0x8bcc0484,0xb9e56eeb,
0x641ef7a4,0x6b479e34,
0x9b95ef51,0xe3e4825c,
0x2f1c90bc,0x8cdd1d0e,
0x556dc4e7,0xcb0337,
0x70b6d236,0xc71b99ec,
0xf5470abd,0xe1442cda,
0x7f6e31dd,0x2509a8d1,
0x5ca54e76,0xe1eff6e2,
0xce63f606,0x7abd77eb,
0xb71f70,0xfca2ee50,
0xbf133c9b,0x2d1b3a29,
0xeb03c0ca,0x8ba00abc,
0xb650dd92,0x70cc33eb,
0x43d401f5,0xea7b6320,
0xa416e9d6,0x8b4235bf,
0xa1414763,0x1e442b12,
0x2ca8899b,0x513572ae,
0x1c8a79e9,0x75aefc69,
0x6f7bc529,0x98f59102,
0x5e9e85cf,0x9a0a0a34,
0xfe4d8f7c,0xe59e81ca,
0x53c550c9,0x76fc47a8,
0xc11e3156,0x2ffc11cf,
0x8ec88a1,0x3b266801,
0x453d9501,0xfc8f74c9,
0xa004225f,0xab4fb862,
0xbfed5818,0x30dd47d1,
0xdb82ba62,0x2e062c2d,
0x4b74de6,0xca795177,
0x5c2d6d04,0xde67c945,
0x146c85c3,0xcff88abe,
0x89d7e665,0x894223e5,
0x9d64e3d,0x2eb64525,
0x12b8e881,0xf207e29f,
0x2031eec5,0xa4e5ce97,
0xf286fe2f,0x4a9dc71a,
0x59dc82ea,0xdba16810,
0x34adf5f2,0x4df84186,
0xb859b940,0x376a5224,
0xb80cd983,0xf8aea712,
0x16d576e9,0xa4f82603,
0x57f23632,0xd4f9fdb,
0x65f5365d,0xe6cc63d8,
0xaf522820,0xc41b0861,
0xaadb8571,0x383a4034,
0x4897f7c,0x6f9807f8,
0xd14d9c64,0xab0ac907,
0xc4be3ba0,0x23e9c243,
0xdd4efbd9,0xf9a2c4b9,
0x9f2616cc,0xbe8f69b7,
0x51634d59,0x6b4a7b80,
0x39f87951,0x16b6d320,
0xa3e802d,0x33d0e94,
0x3a81dd6e,0xf7a71040,
0xbdfffcec,0xa7c442cf,
0xad0755f9,0x1cc8f94f,
0x6dc2040,0x778afaac,
0xca1d8938,0xc8d6bc68,
0xd17dbd25,0x9727511c,
0xad27842d,0x653d0620,
0x69cda7a1,0xaf86552a,
0xe5a6c7c2,0xa427b924,
0xc02d16c7,0x9afeeb4a,
0x8d79e95b,0x4c56213b,
0xa6507425,0x219e75aa,
0x11df41ef,0x133eee4b,
0xf28455b9,0xd2cc7db0,
0x6fa4e353,0xd11ddeb,
0x6856bf23,0x5fb3110c,
0xaa42dc6d,0xc0213e60,
0x80aeda29,0x25ff4061,
0x12a1ed3,0x5a300837,
0xa5a4afc3,0x28ba8ff8,
0x7f01b7cf,0x2bc3edc5,
0x6214916c,0xf69662c2,
0x32ec524e,0x8fb80f61,
0x11c00d36,0x11e6c4fb,
0x433e3abf,0x6a8d5c01,
0xad23b92b,0xac4e5eec,
0x7cdc62a0,0x9cee74f8,
0x7fc2f241,0x382e84ec,
0x1ec5cc0f,0xd94be919,
0x6e42c733,0x23425256,
0xe4664ecc,0xd7fb3b7a,
0xc473db04,0x34b368be,
0xd55a3805,0x223ccac9,
0x41b352f0,0x80eaf040,
0x56038851,0xe5f249c,
0x4b13a36e,0x25f3bc3a,
0x6ac4b905,0x6e84384c,
0x7d62df62,0xcca0dd9d,
0x21b21718,0x425c0d48,
0x6d7a932a,0xd3fbff71,
0xdaf68a0b,0xce9d55f1,
0x9e1fb36f,0x38c2828,
0xae77d338,0xd680a550,
0x708287b,0xed37b0fc,
0x9b665185,0xf4fc11ff,
0xd220afb6,0x7d5c8569,
0x50c2c4ad,0x4b7cc99d,
0x856eafc5,0xbf5cb1e3,
0x94bc46f3,0x35022c9,
0xc820a795,0x20eebfb5,
0xeef0c7d8,0xa6bb841,
0x746edef4,0x7dc56316,
0x29b5c4d0,0x9cc1a878,
0xfcfef25a,0x93ebf912,
0x6ab773c7,0x445df965,
0xc109bc18,0x8d40e1fa,
0xd3a9cf8b,0xe10daac3,
0x72cae940,0xc93c9f91,
0xdc654029,0xe48be6aa,
0xd61fb5b7,0x4ad352aa,
0xf6e479b8,0x152c8ec3,
0xa58dc5f8,0xe991eb43,
0x2fbb6f07,0x6e8ff0f0,
0xe182705c,0x8ac2c70b,
0xeef3c2cb,0x7c224866,
0xe016b7fa,0xf39ed2d,
0x18074bc9,0xfc87889c,
0xdd1991bc,0x1c880cbc,
0xa352d27b,0x9f1bf2bc,
0x261e92b0,0xddf2044,
0x80b56084,0xb4d54e09,
0x42e9f59c,0x49b796eb,
0x3da714c7,0x18907b35,
0x9764e80f,0x5f803837,
0xd42ab46a,0x8c8e19bf,
0x54e4d867,0x107899f9,
0x5f7ed4d5,0x5ed13df2,
0x65a30c4f,0xd8b6603f,
0x8b1a71e3,0xbcdc83db,
0x5e22f3ba,0x476a1eba,
0x4fc8e79c,0x2fab285f,
0xf5712844,0xcd5b4ddf,
0xafa1abdb,0x6075ecf7,
0xc20c4ce7,0x16160a9d,
0x4f0e0c7c,0xc52e2bbc,
0xab0ef63a,0x59bd2dc6,
0xcd15ecbb,0xb1bfefe6,
0xf38b6e1e,0x2b0f5f4b,
0x9b4cfd3c,0x7218e7b6,
0xd422bbdb,0x4004172f,
0x33b969ab,0x874134c1,
0x328bd6c0,0x40c7fd88,
0x329812ec,0x776eb6bc,
0x3a8481de,0x12f3d105,
0x5dc96a78,0x5865f7b3,
0x59961ede,0x11d16d8c,
0xe08da340,0xcb715eb5,
0xf3958036,0xb6313c5d,
0x8462274e,0x8625d648,
0xb1ac22e4,0x9eda6899,
0x498d3ecd,0x2c7a0545,
0xbc358a3b,0x3ffac019,
0x85160807,0x9edc7a69,
0xe1ff3276,0x681e1b7d,
0xc2da6171,0xb4fd5676,
0x5ba03a07,0x1dee326e,
0x9ca85482,0x8553a5d8,
0xfe56f040,0x97997283,
0xff609f91,0x3e0601f9,
0xb5112b5a,0xc459be17,
0x691a5de4,0xddc17d08,
0x829a6a02,0x20da57f3,
0xb9879556,0x4a058199,
0x5d74e198,0x621420da,
0xfad86ff3,0xf1fc6e,
0xbd25f1af,0xf4099004,
0xd4f83fcb,0xbe2bc746,
0xc2c99aa3,0x1701c072,
0x467643e3,0xeee5c685,
0xb839e3d5,0xe873aa99,
0xfee727dd,0xab4b8962,
0x27a221de,0x17d349ae,
0xa6106c6c,0xb542b8c9,
0x2dcdedf7,0xb09e7e7d,
0xda769b66,0xf48e2a1b,
0x1f1d5815,0x331488d3,
0x30b5164,0xb0089a7a,
0xf8aa6864,0xbb95d560,
0xeef01c17,0x72398500,
0xfcb592f1,0xe6d1ec68,
0xbf1dbdbc,0xcf73f42b,
0x5d5bb39a,0xec9ef8fb,
0x56c43c13,0xcd77121d,
0x3c096a7d,0x4e16d309,
0x793d6090,0x97fcea12,
0x6c5195f9,0x78d17585,
0x8e21a4c,0xf92d1e7,
0x89c2f4dc,0xa222d9a8,
0x3ce3124d,0xee478a35,
0x430bb071,0x3d954621,
0x6b8175c8,0x3de4dd2f,
0xe284b1b1,0x245fd94d,
0xda40101e,0x6f9da5f7,
0x6101aac1,0x6c9a0671,
0xe493b529,0x35fab612,
0xe36ebafd,0xb15ca217,
0xf5cab62c,0x923ff708,
0xf98dfa37,0x695414c5,
0x2923c146,0x71e6a8e7,
0x80356396,0xa51cc06e,
0x6fdcc948,0xc03a6d2f,
0x7f07e154,0xcc5783be,
0xaf4d98f,0x761b9c0d,
0x920ea000,0xc4789fd9,
0xaaaab9d,0xa3266e45,
0x34189b1d,0xb5ee5f2b,
0x10c7ae12,0xb341bc03,
0x6c893bdf,0xe3988622,
0x33a9a919,0xb21e1184,
0x3ceb2d49,0x66571518,
0x58089426,0x8f08fa92,
0x5c594bfc,0x211cb96d,
0xa27a1faa,0xff4a9755,
0xe26ac443,0x123b43ee,
0xc1c58d4,0x976bf6b,
0x781328d4,0xfb249200,
0xecba3e41,0xf1958562,
0xce5165fb,0x964ae8df,
0x8cca8efb,0xab00c327,
0x6d09a4eb,0x44ca1c2e,
0xf65bc994,0xd021fed4,
0xf86cf1e6,0x6f09499b,
0x9d6e5841,0x452231f3,
0xb28632e4,0x77528df2,
0xbf2df5da,0x3b2a9348,
0x8869918f,0x603c7c28,
0x60d38b3f,0x8373da67,
0xe06a2ba0,0xf98d6b4c,
0x154737bb,0x51825118,
0xfbe30046,0xe14e903c,
0x5a6d9391,0xa9448c25,
0x445ccfb,0xea369063,
0xabe318fb,0x3af8aa9e,
0x6e84b3b2,0x359d2da6,
0xdf32cb2d,0x442d791d,
0x8ba0b37d,0xb28a770b,
0x752a2564,0xeec10785,
0x42629449,0xbe68976c,
0x1f7b6e6c,0x972c248f,
0x500a1902,0x507465,
0x46ab66a3,0x9d1b257c,
0x73cb91e2,0xb33a2b73,
0x65592ef2,0x1ee56860,
0xf5c79bdd,0x7189d33e,
0xd4225b2d,0x52aa4840,
0xd411d036,0x89215baf,
0x75a8f22c,0x9b7d2163,
0x1a7e7f09,0xfc19606e,
0xc950e01b,0x2faef681,
0x2a2005ac,0xc4b0727f,
0xf7b16988,0xc7fcec92,
0xb95e560c,0x71fee669,
0xd21a43f8,0xf1d27e97,
0x23d7df33,0xa7b8bb1e,
0x13353ea7,0xc1d79b8c,
0x4af020c7,0xa0c3a467,
0xe6c78b56,0x87c9b49f,
0x2aec10e6,0xdd5a9aa9,
0xb151cdb1,0x78ada94f,
0xd3b50ba3,0xf74577f6,
0xc2c2038,0xfde6efd6,
0xaa665400,0x5765f4a7,
0xa2d407e3,0x6fecff1d,
0x9d154b47,0x81558970,
0x13724356,0x72616d1,
0x75ee7ca,0xbe91fc4b,
};
uint8_t Ai_firstround[8][32] = {
	//0
	3, 7, 22, 28, 29, 64, 74, 78, 80, 88, 90, 98, 100, 105, 109, 112, 115, 120, 127, 134, 156, 157, 158, 167, 183, 186, 190, 217, 229, 231, 244, 252,
	//1
	5, 11, 30, 34, 38, 47, 60, 70, 99, 107, 117, 122, 125, 136, 138, 139, 140, 141, 150, 151, 155, 160, 161, 168, 188, 192, 202, 204, 214, 216, 232, 239,
	2, 8, 13, 36, 37, 41, 49, 53, 65, 69, 76, 77, 82, 84, 85, 86, 94, 96, 113, 142, 152, 154, 159, 166, 172, 174, 179, 191, 201, 213, 222, 254,
	14, 16, 32, 35, 39, 40, 42, 46, 48, 61, 81, 97, 101, 104, 111, 114, 121, 124, 145, 146, 175, 180, 185, 195, 198, 209, 212, 224, 227, 228, 235, 241,
	6, 12, 18, 25, 54, 55, 59, 63, 67, 68, 72, 79, 92, 102, 103, 106, 116, 123, 126, 129, 144, 162, 164, 189, 193, 196, 210, 226, 233, 238, 242, 245,
	10, 20, 21, 23, 24, 33, 45, 108, 118, 131, 133, 135, 147, 171, 181, 184, 187, 197, 199, 200, 203, 205, 206, 208, 211, 220, 225, 237, 240, 243, 248, 253,
	1, 9, 17, 19, 26, 31, 44, 50, 51, 66, 75, 83, 91, 95, 119, 130, 148, 149, 153, 165, 170, 173, 178, 207, 218, 219, 221, 223, 236, 249, 250, 251,
	//7
	0, 4, 15, 27, 43, 52, 56, 57, 58, 62, 71, 73, 87, 89, 93, 110, 128, 132, 137, 143, 163, 169, 176, 177, 182, 194, 215, 230, 234, 246, 247, 255,
};
uint32_t possible_right_paris_firstround[9][2]{
	0xefbf7f6f,0x4ce08ef9,
0x959c3a1d,0x157a14b8,
0xf776b171,0xd776b171,
0x665d8e2a,0x58bf79c1,
0xc57a10c1,0xb92000f8,
0x1990a9f9,0x68643ff5,
0x4897cb3f,0xc2f4f78d,
0x30029aa5,0x9dc66dc6,
0x48d286b0,0x14313936,

};
uint32_t right_pairs_firstround[3][2]{
		0x959c3a1d,0x157a14b8,
		0x665d8e2a,0x58bf79c1,
		0x48d286b0,0x14313936,

};

uint8_t Ai_secondround[8][32] = {
128, 4, 11, 140, 15, 149, 23, 161, 39, 40, 47, 53, 54, 57, 58, 59, 63, 198, 74, 75, 209, 82, 86, 91, 93, 96, 230, 107, 110, 241, 120, 121,
136, 151, 24, 32, 165, 167, 169, 42, 170, 183, 61, 64, 65, 199, 73, 83, 212, 84, 94, 226, 227, 101, 229, 105, 237, 238, 109, 124, 242, 243, 249, 252,
1, 2, 133, 8, 139, 12, 141, 145, 19, 21, 22, 158, 160, 35, 36, 177, 60, 192, 68, 201, 202, 79, 208, 87, 216, 89, 95, 224, 225, 103, 117, 246,
5, 134, 137, 150, 156, 30, 34, 41, 172, 173, 180, 181, 182, 185, 188, 62, 194, 196, 200, 204, 207, 80, 215, 98, 234, 112, 114, 115, 254, 122, 123, 126,
3, 131, 7, 14, 144, 17, 20, 148, 25, 31, 33, 38, 171, 174, 48, 178, 55, 186, 190, 67, 72, 206, 81, 214, 218, 221, 100, 233, 235, 113, 244, 248,
129, 135, 9, 143, 16, 146, 147, 28, 157, 37, 168, 45, 46, 49, 184, 56, 189, 69, 197, 71, 76, 205, 211, 85, 88, 222, 228, 111, 116, 119, 253, 127,
130, 6, 10, 138, 18, 27, 155, 29, 164, 43, 44, 176, 50, 179, 187, 193, 66, 195, 203, 77, 219, 220, 223, 99, 102, 231, 108, 239, 118, 247, 251, 255,
0, 132, 13, 142, 152, 153, 26, 154, 159, 162, 163, 166, 175, 51, 52, 191, 70, 78, 210, 213, 217, 90, 92, 97, 232, 104, 106, 236, 240, 245, 250, 125, };
uint32_t goodpairs_secondround[512][2] = { 0x2c2a1933,0x77dd8c9b,
0xb11d877a,0x526b31f3,
0xaa0613ce,0x86b5b938,
0x47dbad69,0xf3a2ab3c,
0xf4e64cb2,0xcd86e9b9,
0xa692e28,0x42a19ed9,
0xa15462d1,0x481185e8,
0xe848ea1,0xddd2d868,
0x204582b6,0xf10dfebe,
0x666bb5cc,0x25e985dd,
0x86e146a6,0x2c8f1a5b,
0x14292353,0x72307dc7,
0x6ff356ce,0x207d816,
0x6592520f,0x58f4d8da,
0x89280a28,0xb5464bd,
0x84bd8285,0xbc28bf31,
0x2b7db272,0x3d78eb4f,
0x3e2e030e,0xc0ff0eb9,
0x30077543,0x2dba978f,
0x48a677ba,0xc61be29a,
0xe6dcb720,0xddfe0fef,
0x9edb992d,0x67f6f978,
0x1e341be3,0xdccd6300,
0xbb992427,0x55349608,
0x2b68d4bd,0xae202853,
0x3145f1d3,0x50e01102,
0x530373dc,0x813bfede,
0x11839a4a,0x3e5b0311,
0x42973e41,0xe80daa53,
0xdbbc723d,0x1e7318ef,
0x106acd05,0x3ffdb8aa,
0x5c3c0d81,0xbd401b30,
0xfaf1158f,0xb78a2bdd,
0x9332cb66,0xf188ec60,
0x4f2761e6,0xd5728839,
0x51d4dc21,0xdf7ec984,
0xda61d02a,0x8d8d0e89,
0x7b464f86,0x5aa6c9d0,
0x2537b58e,0x5b543519,
0x2653354b,0xd475c3be,
0x45362965,0x2145476f,
0x3997524e,0x724b15a0,
0x8269bf9d,0x8a944b2b,
0x698fbd7b,0x4ca34f9d,
0x8c0c4cc2,0xb89f2137,
0x7edd2e5c,0xcb7dfec8,
0x17cc02d5,0xf34b0ad4,
0x2e62092b,0xcdf2ecb2,
0xa0484f66,0xd7af0e9c,
0x7b16360b,0xa021d270,
0x7fb90837,0xc26412a,
0x60aeb2b8,0xecb5acb6,
0x6448ac92,0x55636a2,
0x62679d1f,0xe19cdf50,
0x36cb221f,0xc13af7e6,
0x1bf9e02d,0xb23f7f1b,
0x48cc3f1c,0x2173bda7,
0x88e3fdd4,0x6425f288,
0xf68adf14,0x4f722ca4,
0x6b33edfd,0x8c4f7c81,
0xb8d1fc69,0xff0b49e9,
0xa756a017,0xfbc07b90,
0x445f91b3,0x3028c38e,
0x3be048c8,0x7de4e2bb,
0xe43d0edb,0x64c06c10,
0x488b440f,0x4c578a36,
0x72b7e5eb,0x6687fc88,
0x21a5e65b,0x3fbb537c,
0x7b6aeba,0x656490bb,
0xe3454b21,0x556c4c95,
0x820da93f,0x14875f4b,
0xcd672a92,0xaa987859,
0x7a10a5be,0xec4ff003,
0xe8389d9b,0xcd3ee8fb,
0x2d1ef418,0xe83bf6c8,
0x4d52bff0,0xb1dbc412,
0xcc0b12cc,0x3c0e74c0,
0xe8664dbc,0x8fa10fd3,
0x3310fdbb,0xeb03af62,
0xb35d7bb0,0x7491124a,
0x4cec6bb3,0x2253c1ec,
0xf5da598,0xc9fae1e9,
0x62349e92,0x5c570db2,
0xd17deacf,0xd6a33de1,
0x5fc3d695,0x6d9aff6f,
0x5c6fb348,0x903f19aa,
0x6df531f2,0x99fce705,
0xbf119790,0x7da9816e,
0x89997f90,0x3581a485,
0x77507858,0x824fd84a,
0xdd4b2b7f,0xfcc7cade,
0xfbd4307c,0x810b5055,
0xca0c4df0,0x9ceba983,
0x663f97b6,0x70df6275,
0x3d883a2,0xe0db2488,
0x910bf876,0x173f2112,
0x731db928,0x8e3fddd5,
0x9dc12bde,0x27a856c7,
0x168f53e1,0x680a001d,
0xb20cb108,0x9fb88ac3,
0x6190adb4,0x79089d4,
0xc3f8ceab,0xab9d5d49,
0x1011a55,0xb017177,
0x5128b2d7,0x848aea80,
0x452badc5,0x57a0f17d,
0xe91adc69,0x3e622e70,
0x5e793b1f,0xdadd33bd,
0x6d3ff748,0x7842a54e,
0x783a15ec,0x6f9c26b4,
0x1fbdc3b6,0x3914f20a,
0xa040f668,0xc0ec8842,
0xa9f1faa,0x9d96a500,
0x4b709d63,0x500bceab,
0x8f22a918,0xde8b4731,
0xb4b354fe,0x300de282,
0xa2e575eb,0x99b8d52f,
0x3b07625b,0xe3f5977,
0xba5e3788,0x432d9a92,
0xd49e88fa,0xa55737ba,
0x6f21ed79,0xd5f3ee01,
0x7d2710e7,0xbfedc0ae,
0x4b79518,0xaeb11db8,
0x477a5b39,0xda3a4000,
0x97aa6490,0xc6cb414e,
0x1d8f7fcd,0x7e0a72e5,
0x244c82b9,0x16c9e0db,
0x98026f84,0xd46dc872,
0xc9089f3f,0x276d9c54,
0x3d15fe2c,0x9d45ab74,
0x750726f9,0xc6cd3c23,
0x7c3e57a9,0x6f9d3e87,
0x76ffd81e,0x4e2f7f17,
0xa6a7e2de,0xf044c57c,
0x90b3c0e5,0x874377d5,
0x22d92d,0xdbc6d681,
0x538139b2,0x3f91ac39,
0x87927581,0x7d953561,
0xebc1cdb1,0x19a68608,
0x2b33a9bc,0xbd121e1d,
0xd9f272b3,0xc5e4b8ee,
0x7812b5a3,0xbc3d3567,
0x1fb5732e,0x7f8c736,
0x7e43b9c9,0xae6ffc20,
0xd4fc9dae,0x4b56f855,
0x9d68c2d2,0xa701b136,
0x2a8b3308,0x89e4ca64,
0xd14100f6,0xb950275d,
0x3f07d5d9,0x412f8a,
0xfdba81a0,0xd66228a4,
0xaccfb208,0x7b1afdc,
0x4434ba49,0x6ec9df7f,
0x55c6637f,0xa79e68b1,
0xeae04261,0xc7f6de80,
0xdf7e2989,0x89ed475f,
0x50859f4e,0xc3be740,
0x9924835a,0x675bc3b,
0x6e7a6634,0xc7d6f6ba,
0x9ab840d,0x9514cf82,
0xc812e1c1,0xa3223be5,
0x54764e8d,0xb4c5dfa1,
0x2b0e35dd,0x787a25c4,
0xc7640897,0x7d0d3e57,
0xfa13470f,0xc08e3832,
0x13171a70,0xc8f48173,
0xb25b6f69,0xf366bbdb,
0x1abdf660,0x8ebc1085,
0x3f83faf9,0x4d24b636,
0xb3a36408,0x81553ea3,
0xfda1b2d2,0xb2e46b52,
0x469080d8,0x7a6b86c6,
0xc831c13c,0xe94b2ccb,
0xfba7868f,0xcebfcd8e,
0xae6aa0a4,0x20eb48f6,
0xf4997c7b,0x796b5e5a,
0x5d017d08,0x6871489a,
0x82bba74b,0x35aaebcb,
0x9c023aca,0x6532f43b,
0x9e0a99c8,0x5db6e527,
0x8c97bfdb,0xe0d61841,
0x6993efef,0x82d42d19,
0xaa859132,0x4ba91e2f,
0x30c9dfc1,0x4bb1784a,
0x2af20d41,0x9ff874e1,
0xdf41281,0x8ac19b3b,
0x22460eb9,0x41f73978,
0x1a699fcc,0x265f2d91,
0x5a56c677,0xdfec130c,
0x5c45cc3,0xc16c559b,
0x79b2eed9,0xe873ce7a,
0x8dceb1f1,0x54c6748e,
0x1bd035bd,0x715510fd,
0x224a3d55,0xa1488f7,
0xd0b93bd0,0xabfd75a0,
0xea9a41d4,0x39d73af6,
0x89bdf132,0x4729c200,
0x5b26c69f,0x74b0e7e1,
0x5c06de04,0xa752e7a3,
0xd8b4587,0xdb280ec1,
0xf17b7f5a,0x39326874,
0x1c54f09f,0x1e44f789,
0x949e19e5,0xa8a033e,
0xf2e23394,0x998c4fcd,
0xecbc220,0xd1a9be01,
0x4fb866bd,0x1d04bb10,
0x49ac70b0,0xc12c47f7,
0xb080b547,0xb9f3bd9f,
0xb2bfff5c,0xdc1b53b6,
0xf51e4c05,0xf3a9a78b,
0x54073848,0xb73055b8,
0xd87c5b55,0x1c41aec5,
0x7009758b,0x6b4e3a36,
0x85aa1689,0xc4d475ac,
0x357ee309,0xcb0551f8,
0x58fe8f95,0xc4234364,
0x2ad9bc43,0xf8b6c338,
0x705c9723,0xf11440c7,
0x5966ddaa,0x8ba6f08a,
0xcb3003b0,0x222fcff7,
0x658e50c3,0x2bd0c8d5,
0x925e8391,0x29ea0b86,
0xa76c1795,0x69c90732,
0xc5bbac5a,0x21323d5b,
0xfa6ca603,0xc8712cf5,
0x2be6f6ff,0x87c32aaf,
0x8b338103,0x34b2c280,
0x5bcd5797,0x4e20b7c8,
0x83487d02,0x10a03f6d,
0x7b8118c4,0xd87c8c6e,
0xe15d750a,0xe8d638b1,
0xde0326d,0x4c3a3751,
0x83d36679,0x9943dec5,
0x2c60bca0,0x3ec2102b,
0xfae9bc7a,0x1fa587cc,
0x8c4ab607,0x5880cc2a,
0x21164d63,0xb69dc962,
0x937b2194,0xf182d28,
0x23d13d1,0xa82e693c,
0xb24e6b2b,0x9c7bfde,
0x765d580a,0xd5b35050,
0x92cfd55b,0x1d82ea67,
0xfc7b35d8,0x6b206934,
0xc4bbb9fe,0xa1d9c9a4,
0xf69a1775,0xe4a50263,
0xc2dd2b62,0xcb28d2f,
0x19f9cdf3,0x2726bad3,
0x20152977,0x97bea79a,
0xbbed1f6c,0x9f0954bf,
0xce89c4d5,0x74d52497,
0x20c3b509,0x7eccecc2,
0xc0f1f9b5,0x35205c4a,
0xafa8ad25,0x9aa8ad25,
0x8fcdad14,0x3960fa4b,
0xbf942a01,0x85770d49,
0xfdac2725,0x21523d5b,
0x418f97a3,0xad08be18,
0x8e00a093,0xb386c5ca,
0x6274ff4f,0xf58fd059,
0x5f572078,0x944a2d2a,
0xdb507b19,0xe1ff4ce,
0xed955962,0x245f750,
0x7b6b1da3,0x21eeb5ec,
0xcb204508,0xa49748ae,
0x4ab44dff,0x1f942da0,
0x75726353,0x80f83e00,
0x707f587d,0x1e29fc4d,
0xfa5c3099,0x845d7e7b,
0xc84058a,0x5cf8e475,
0x40f41a35,0x97f41a35,
0x746a3844,0x2183623f,
0x4f1fea4d,0x7afc79af,
0x467801c2,0x597207d9,
0xb3618d10,0xd67f38cf,
0x3db8326d,0xc86dc2e7,
0xfe6e2fb4,0xd69b0ab9,
0xdb5cd6c3,0xec4cb802,
0xe5a7e287,0x5c9042f4,
0x290180af,0xc0655228,
0x3460be34,0x239f73e4,
0xcdddb92e,0xda0593e5,
0xd7ef4b23,0x666c66cf,
0x571b49e,0x880eb5d6,
0x10a6c169,0xa3ce52d2,
0xef327ca8,0x66fa8115,
0x8f149807,0xc98fb380,
0xdba5606f,0xcb2a7cb4,
0xa6166821,0x32cbc2f7,
0xaf84ad6d,0x29281e0c,
0x1e3fdcdd,0x39fa984e,
0xf00dd1a6,0xfc37d817,
0x3e0fd8fe,0xff5700d5,
0xf04b7a09,0xda7ee77f,
0xc0a522cf,0x8d6724d8,
0xf4aa0171,0x8ff741ca,
0xa9ebaa34,0xc602841b,
0xdf5309b2,0xb05309b2,
0xd14d25cb,0xa01c94ce,
0xe6e7d74a,0x8497f0fc,
0x182102bf,0xbf83c7a4,
0xf56bd009,0x80098a81,
0xccfcb7ce,0x16ceac1b,
0x69b1da68,0x4315aaee,
0x7a891a41,0xd40b17c5,
0x9bae749a,0x120db599,
0x41420031,0x985386ea,
0xe4222234,0xdf4905c9,
0x5d7b7c51,0x556bfaf1,
0x4ba23c10,0xf3a92d1d,
0x2825c15c,0xef6315af,
0x5e361d29,0x493e2a86,
0xe76a3a02,0x8a6a3a02,
0x22c5be26,0x602a30c7,
0x5a555dc2,0x776767ef,
0xd07eb163,0x50fc4a5c,
0xd2f12811,0x5a735885,
0x26cabf87,0xa32b80f4,
0x38babe80,0x727ac032,
0x478626ef,0xb88626ef,
0x5bf67908,0xc2291cae,
0x49230963,0x1440cf01,
0x82df5103,0xe26a2d8,
0x3f4bec5c,0xd6d37627,
0x77988210,0x8dc4870d,
0xa8464507,0xbf6e3b01,
0x21ad71f1,0xc7b669e9,
0x6a4ee803,0xadcb3c6,
0x8f75653d,0x6ff9173,
0x8c12ef27,0x18f59dc4,
0xc30890c6,0xb430aae0,
0x8833fee3,0xd225977c,
0xc69c9b58,0xad19f778,
0x5cbcf5d0,0x85d87841,
0x6d5d3cd6,0x58d3b7fd,
0x34d5a105,0xe8589606,
0x4f3140dc,0xddad8964,
0x4205f94b,0xcae5402d,
0x90459796,0xdb8ad290,
0x519d816,0x33ee3623,
0xb2554332,0xf34c34b8,
0xba149362,0xe394211e,
0x1d2616f0,0x45e1e43b,
0x6a88b6dd,0x8292697f,
0x4fc00b18,0x25a885c8,
0xfd3ed83e,0xe43ed83e,
0x24344d94,0x953a8546,
0xb56756de,0x2717f040,
0xc7ff0fb1,0xeb04cc0a,
0x7e2d76ee,0x9dc0a0a1,
0xab164659,0x56a063a5,
0x4bf274f8,0x95f274f8,
0x6ccfb2fe,0x4276ffac,
0x585fc894,0x6c34bffa,
0xd6d48697,0x7e62d441,
0xa06a39ca,0x31b93f35,
0x18028394,0xbc33ccd7,
0xac5ab308,0xd59e8e8f,
0xd313c455,0x48ca5dbc,
0x33addfd2,0xd1dec841,
0x9d3ceac1,0x4fd9201d,
0x2b5b1093,0xb3443881,
0xf7ac3d9a,0x313890b8,
0x1e61be07,0x4092c045,
0x297f28f,0x721bf3ca,
0x91aef1e9,0xe435ad2c,
0xea2464b1,0x3d6b963c,
0xf1d9b533,0xa8ab47ea,
0x60929638,0x19155ee9,
0xe1ddadc7,0x47dbeccf,
0x6324fcb3,0x2e1f495b,
0x79302e2a,0xa9313058,
0x58436a95,0xd65ed623,
0xd9b287f5,0x387636c3,
0xbc7f1624,0x60b9e379,
0x936ddbc5,0x11377830,
0x7327f36a,0xe30a8023,
0xa06e2d79,0xf0c761ca,
0xe30f5710,0x9684f955,
0x9d0a96ca,0xe77d919f,
0xb0b69619,0x609c95c0,
0xe054dec1,0x8029b1ab,
0xcb701129,0xd1988de0,
0x3b2f0f8c,0x2e73c1eb,
0x33db2dd3,0xfadf33d9,
0x3728f1a4,0x845424cc,
0xc8e2f098,0xcf06c7a7,
0x150e3910,0x646c5f27,
0x64282cc7,0xb2ef4c77,
0xb544a4ab,0x895a5730,
0xe008350c,0xe9609798,
0xe3bdc39,0xc62d173f,
0xfb04ed7f,0x9997dd47,
0x42630f37,0x7e7fa968,
0xf692202e,0xbda81633,
0x5391ae70,0x2c921139,
0x3a97fca8,0xd45adbc1,
0x62f4680f,0x9359cea2,
0x88d2adb3,0x5274300b,
0x68928b35,0x8f59a6c3,
0xf197fefa,0xa496b45f,
0xc20ed4d3,0x8420757e,
0x9e676a5f,0xdc427732,
0xc315db9d,0xf497c64c,
0x886b8f8c,0x1d838208,
0xce64c73b,0xfd37cf1f,
0x1021026b,0x4622af82,
0x6b6c41d5,0x712663ba,
0xcf1a6c5,0x33dd1fa8,
0x529b3301,0x5394a253,
0x23a8cc0e,0x498a53,
0x7a830624,0x5ffb59f6,
0x392ddc5e,0x28409f69,
0x6e4d75b,0x69f34b16,
0xa79ef9e6,0xdba65b90,
0x5c4eb60b,0xe576d718,
0xbc6648d4,0x3c4508a3,
0x1dcb0147,0x30f368b5,
0x227b17a6,0x8f7acb98,
0xc8ed0427,0xd7efb1b3,
0x1a8731ea,0x9b8b7e99,
0xaf764e5d,0x979e7b97,
0x4928e245,0x25e2b285,
0x6a14f3b4,0x3b172829,
0xdbc91d3b,0x317b97d,
0x67f6c7a4,0x1750b008,
0xf51332f1,0x67b0c14e,
0x97785213,0xd0fce02f,
0x2a6ab709,0xe94e58e1,
0xd8c12bdb,0x362ddc0c,
0xaf13906f,0xcea6b965,
0x4d2831de,0x26b806fd,
0xdcdc625f,0x6b2581db,
0x1d19c476,0x19fa91cd,
0x12255f3,0x10984ca7,
0x9df7ceee,0xe732bab6,
0xa063e363,0xfc3567bb,
0x72f1778a,0x45d0f215,
0x6b192e11,0x9c26a288,
0x4331ebdd,0x3a902b0a,
0x4b65dbd3,0x513c6dfc,
0x5d506050,0xa85a965f,
0x90e30596,0x96ef2405,
0x1827b964,0x9727b964,
0x81b9327b,0x1ec71544,
0x5251ce09,0xff07fa,
0x2db0f9b1,0x566ecd92,
0xe5af4445,0xe3fd498c,
0xac0e1d68,0xc1f48716,
0xa8cd9e71,0xf5c95a4f,
0x13cc7c49,0xe5ed0058,
0x9c36fb70,0x96448056,
0xcf010f27,0x9e0926dd,
0x873f2a3a,0x42c8dc0a,
0x28f782ad,0x985238fd,
0x64527bc9,0x2907c420,
0x1f3ace61,0x90a9c9f8,
0x4b14659c,0xd3736ed6,
0x9cf55eef,0xd50f44e9,
0xa5c755b8,0x276a1286,
0x5807041a,0x616be6ba,
0xb03c21fd,0xca62dd0b,
0xca4ed7c1,0x9bfda182,
0x55bd92b1,0xe0f3711,
0x81582bb4,0xd2725626,
0x70091e2c,0x96019ba0,
0xf71ecd3a,0x92c6713e,
0x437f6c7,0xb27ccc2b,
0xce7814f6,0x3beaa504,
0x5009d971,0x610c4a12,
0xdebe2afd,0x4a5a846d,
0x698c4f24,0x36f027ec,
0xe9301ec2,0x4a955eaa,
0xacf8909b,0xcddf79a3,
0x8e0d3e52,0xbe1df909,
0x130e9d6c,0xe1060a0d,
0x6779432f,0x2e30f0d4,
0x1624954a,0x8c1c6f66,
0x41ffff1,0x7d2cf508,
0x33d5ad7d,0x191f05e2,
0x860faedc,0xe0c1862e,
0x4fe94da6,0xe8d25cbe,
0x49e68e6c,0x734aa719,
0x4a027823,0x9d42be3f,
0xddebca27,0x145e7e7f,
0x19531fa7,0xeab8a2c4,
0xb2a21846,0x31b0659f,
0xf14a8d8d,0x7476ee52,
0x79905915,0xf3ecbec,
0xc4f5da4b,0xdabf5d42,
0xcae0b5db,0xe499e96f,
0xbd0e4502,0x5a9908ad,
0x81cfe415,0x2f520532,
0x1abf1ee6,0x9a4257ec,
0x996dedae,0x679eee48,
0xca62353,0xbd571541,
0x6f656791,0x890eb8a5,
0x2ca642c2,0x63365131,
0x75c79853,0x6e7bcb25,
0x5acba254,0xe41419f4,
0xc0478f01,0x3b8d2707,
0xdf8e3d42,0x71368396,
0x3a7db8d5,0xf89bc2b5,
0x17f1da23,0xb93d163f,
0xb03f01c,0x2189f146,
0xb4b8f0fa,0xc9a38891,
0x6016401,0x1ccdc89f,
0xe5e97ec1,0x67ada692,
0xef484356,0x28d484bf,
0x85a9e48d,0xc31cf890,
0xb73f31e,0xe5a2939b,
0xd9c1ba85,0xe2da678b,
0xa072292c,0xf3051e8e,
0x80f79952,0x52d588bb,
0xa01c6db,0xb2ea55c3, };
uint32_t possible_right_paris_secondround[20][2] = { 0xd5a5efb9,0x196e192b,
0xd5a5efb9,0x196e192b,
0x8900dbe9,0xf18aaba7,
0xbd743153,0x1a160400,
0xff0dbb,0xd1020314,
0x3d605d37,0xd5b13045,
0x50f30754,0xfc66311,
0x2f47caed,0x7e943903,
0x814cf6a8,0x51c445c1,
0x21b9566e,0x9dde4eb5,
0x7d676a32,0x9a676a32,
0x8e671183,0x352c99b0,
0xba9e164,0x121e1d8f,
0x2410e966,0x9ed98ba,
0xe6eff308,0xe5d1cb41,
0xfcc3c55a,0x4eaef2fb,
0x1f47dfae,0xd647dfae,
0x75860186,0x23860186,
0xe49bb24f,0xe3507738,
0x5ed1b4f0,0x2ad1b4f0, };
uint32_t right_pairs_secondround[4][2] = {
0xbd743153,0x1a160400,
0xff0dbb,0xd1020314,
0x3d605d37,0xd5b13045,

};


uint32_t goodpairs_thirdround[32][2] = { 0x56e01389,0x7f9137bd,
0xd405c8ec,0x19b2f21c,
0xee878b1d,0x28f685c5,
0x1d1b52a0,0x8cf41690,
0x305f86f2,0x118508a9,
0xfb6d6ee8,0x9a5775bc,
0xc1d2d95f,0xea5027bb,
0xe98b2978,0x7cbb835e,
0x53ca77de,0xb8d25827,
0x46211940,0x4ada59e9,
0xfa7ccc23,0xb7ab2061,
0x1370e821,0x7070e821,
0x2799c5a8,0x598dafa6,
0x4798fcc3,0x9a7a29ef,
0xfed658cc,0x7b2ab673,
0x25ced610,0xeca62a7f,
0x7b1c83c2,0xe135f942,
0x2e79e435,0xafdf2ae2,
0x1433d062,0x69dce100,
0x60706c0,0xf00706c0,
0x5bf0060e,0xfb644a13,
0xc3e85f69,0x8e39bbdd,
0x91f5a412,0x382b7fe0,
0x2e300e49,0xa8530625,
0xd0ccfc30,0x868ead41,
0xec0e0928,0xd213a8f3,
0xf0ed124b,0xe694e0a8, };
uint8_t Ai_thirdround[8][32] = {
193, 132, 5, 69, 139, 12, 141, 204, 79, 17, 148, 85, 149, 215, 94, 225, 164, 101, 230, 39, 168, 233, 170, 239, 177, 242, 53, 181, 249, 59, 189, 126,
196, 133, 136, 203, 76, 208, 210, 84, 213, 254, 23, 25, 217, 155, 247, 157, 221, 160, 97, 38, 166, 104, 169, 106, 50, 180, 117, 182, 55, 253, 190, 191,
192, 2, 66, 255, 8, 74, 138, 77, 143, 209, 146, 88, 153, 26, 28, 223, 224, 98, 185, 37, 102, 186, 105, 43, 235, 176, 114, 115, 120, 57, 58, 63,
64, 194, 3, 197, 70, 135, 201, 10, 11, 13, 206, 82, 212, 214, 87, 92, 220, 30, 95, 33, 100, 229, 40, 107, 237, 46, 174, 49, 113, 244, 183, 60,
65, 131, 68, 198, 7, 71, 75, 142, 16, 80, 18, 19, 150, 151, 152, 27, 29, 31, 96, 227, 165, 103, 167, 232, 234, 171, 236, 45, 112, 241, 52, 187,
0, 1, 195, 4, 6, 72, 200, 207, 145, 21, 216, 218, 219, 156, 93, 159, 248, 161, 35, 231, 44, 108, 109, 240, 179, 245, 118, 184, 122, 252, 62, 127,
128, 129, 130, 134, 199, 9, 137, 202, 140, 205, 81, 211, 20, 22, 89, 90, 222, 32, 34, 99, 228, 173, 110, 47, 48, 251, 51, 116, 246, 250, 123, 125,
67, 73, 14, 15, 78, 144, 83, 147, 86, 24, 154, 91, 158, 162, 163, 36, 226, 41, 42, 172, 238, 111, 175, 178, 188, 243, 54, 119, 56, 121, 124, 61,
};
uint32_t possible_right_paris_thirdround[20][2] = {};
uint32_t right_pairs_thirdround[3][2] = {
0x1d1b52a0,0x8cf41690,
0x305f86f2,0x118508a9,
0xfb6d6ee8,0x9a5775bc, };




int main() {

	//Step 0
	//gen_Tbox(Tbox1);
	//gen_Tbox_inv(Tbox1, Tbox1_inv);
	//Step1
	//DivideIntoAi_FirstRound();
	//Step 2
	//GetGoodPairs_FirstRound();
	//Step 3
	//GetCorrectPermutation_FirstRound(goodpairs_firstround);
	//Step 4
	//GetPossibleRightPairs_FirstRound(66, goodpairs_firstround);
	//Step 5
	//GetRightParis_FirstRound(possible_right_paris_firstround, Ai_firstround);
	//Step 6
	//DivideIntoBj_FirstRound(right_pairs_firstround, Ai_firstround);

	
	
	//Seconde-Round
	//Setp1
	//DivideIntoAi_SecondRound();
	//Step 2
	//GetGoodPairs_SecondRound();
	//Step 3
	//GetCorrectPermutation_SecondRound(goodpairs_secondround);
	//Step 4
	//GetPossibleRightPairs_SecondRound(607, possible_right_paris_secondround);
	//Step 5
	//GetRightParis_SecondRound(possible_right_paris_secondround, Ai_secondround);
	//Step 6
	//DivideIntoBj_SecondRound(right_pairs_secondround, Ai_secondround);

	

	//ThirdRound
	//Setp1
	//DivideIntoAi_ThirdRound();
	//Step 2
	//GetGoodPairs_ThirdRound();
	//Step 3
    //GetCorrectPermutation_ThirdRound(goodpairs_thirdround);
	//Step 4
	//DivideIntoBj_ThirdRound(right_pairs_thirdround, Ai_thirdround);

	
	//LastRound
	/*
	for (int i = 0; i < 256; i++) {
		uint32_t input = i;
		input = RecoveredThirdRoundInverse(input);
		input = RecoveredSecondRoundInverse(input);
		input = RecoveredFirstRoundInverse(input);
		input = yoroi(input);
		input = input & 0x000000FF;
		cout << int(input) << ",";
	}
	*/

	cout << yoroi(0x12345678) << endl;
	cout << Recoveredyoroi(0x12345678) << endl;
}






